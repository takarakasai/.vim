!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ArgumentsIterator	clang_complete/plugin/clang/cindex.py	/^        class ArgumentsIterator(collections.Sequence):$/;"	c	function:Type.argument_types
ArgumentsIterator	clang_complete_old/plugin/clang/cindex.py	/^        class ArgumentsIterator(collections.Sequence):$/;"	c	function:Type.argument_types
Availability	clang_complete/plugin/clang/cindex.py	/^    class Availability:$/;"	c	class:CompletionString
Availability	clang_complete_old/plugin/clang/cindex.py	/^    class Availability:$/;"	c	class:CompletionString
CCRStructure	clang_complete/plugin/clang/cindex.py	/^class CCRStructure(Structure):$/;"	c
CCRStructure	clang_complete_old/plugin/clang/cindex.py	/^class CCRStructure(Structure):$/;"	c
CONFIG_NAME	clang_complete/bin/cc_args.py	/^CONFIG_NAME = ".clang_complete"$/;"	v
CONFIG_NAME	clang_complete_old/bin/cc_args.py	/^CONFIG_NAME = ".clang_complete"$/;"	v
CachedProperty	clang_complete/plugin/clang/cindex.py	/^class CachedProperty(object):$/;"	c
CachedProperty	clang_complete_old/plugin/clang/cindex.py	/^class CachedProperty(object):$/;"	c
ClangComplete	clang_complete/plugin/clang_complete.vim	/^function! ClangComplete(findstart, base)$/;"	f
ClangComplete	clang_complete_old/plugin/clang_complete.vim	/^function! ClangComplete(findstart, base)$/;"	f
ClangCompleteInit	clang_complete/plugin/clang_complete.vim	/^function! s:ClangCompleteInit()$/;"	f
ClangCompleteInit	clang_complete_old/plugin/clang_complete.vim	/^function! s:ClangCompleteInit()$/;"	f
ClangGotoDeclaration	clang_complete/plugin/clang_complete.vim	/^function! g:ClangGotoDeclaration()$/;"	f
ClangGotoDeclaration	clang_complete_old/plugin/clang_complete.vim	/^function! g:ClangGotoDeclaration()$/;"	f
ClangGotoDeclarationPreview	clang_complete/plugin/clang_complete.vim	/^function! g:ClangGotoDeclarationPreview()$/;"	f
ClangGotoDeclarationPreview	clang_complete_old/plugin/clang_complete.vim	/^function! g:ClangGotoDeclarationPreview()$/;"	f
ClangObject	clang_complete/plugin/clang/cindex.py	/^class ClangObject(object):$/;"	c
ClangObject	clang_complete_old/plugin/clang/cindex.py	/^class ClangObject(object):$/;"	c
ClangQuickFix	clang_complete/plugin/clang_complete.vim	/^function! s:ClangQuickFix()$/;"	f
ClangQuickFix	clang_complete_old/plugin/clang_complete.vim	/^function! s:ClangQuickFix()$/;"	f
ClangUpdateQuickFix	clang_complete/plugin/clang_complete.vim	/^function! g:ClangUpdateQuickFix()$/;"	f
ClangUpdateQuickFix	clang_complete_old/plugin/clang_complete.vim	/^function! g:ClangUpdateQuickFix()$/;"	f
CodeCompleteTimer	clang_complete/plugin/libclang.py	/^class CodeCompleteTimer:$/;"	c
CodeCompleteTimer	clang_complete_old/plugin/libclang.py	/^class CodeCompleteTimer:$/;"	c
CodeCompletionResult	clang_complete/plugin/clang/cindex.py	/^class CodeCompletionResult(Structure):$/;"	c
CodeCompletionResult	clang_complete_old/plugin/clang/cindex.py	/^class CodeCompletionResult(Structure):$/;"	c
CodeCompletionResults	clang_complete/plugin/clang/cindex.py	/^class CodeCompletionResults(ClangObject):$/;"	c
CodeCompletionResults	clang_complete_old/plugin/clang/cindex.py	/^class CodeCompletionResults(ClangObject):$/;"	c
CompilationDatabase	clang_complete/plugin/clang/cindex.py	/^class CompilationDatabase(ClangObject):$/;"	c
CompilationDatabase	clang_complete_old/plugin/clang/cindex.py	/^class CompilationDatabase(ClangObject):$/;"	c
CompilationDatabaseError	clang_complete/plugin/clang/cindex.py	/^class CompilationDatabaseError(Exception):$/;"	c
CompilationDatabaseError	clang_complete_old/plugin/clang/cindex.py	/^class CompilationDatabaseError(Exception):$/;"	c
CompileCommand	clang_complete/plugin/clang/cindex.py	/^class CompileCommand(object):$/;"	c
CompileCommand	clang_complete_old/plugin/clang/cindex.py	/^class CompileCommand(object):$/;"	c
CompileCommands	clang_complete/plugin/clang/cindex.py	/^class CompileCommands(object):$/;"	c
CompileCommands	clang_complete_old/plugin/clang/cindex.py	/^class CompileCommands(object):$/;"	c
CompleteArrow	clang_complete/plugin/clang_complete.vim	/^function! s:CompleteArrow()$/;"	f
CompleteArrow	clang_complete_old/plugin/clang_complete.vim	/^function! s:CompleteArrow()$/;"	f
CompleteColon	clang_complete/plugin/clang_complete.vim	/^function! s:CompleteColon()$/;"	f
CompleteColon	clang_complete_old/plugin/clang_complete.vim	/^function! s:CompleteColon()$/;"	f
CompleteDot	clang_complete/plugin/clang_complete.vim	/^function! s:CompleteDot()$/;"	f
CompleteDot	clang_complete_old/plugin/clang_complete.vim	/^function! s:CompleteDot()$/;"	f
CompleteThread	clang_complete/plugin/libclang.py	/^class CompleteThread(threading.Thread):$/;"	c
CompleteThread	clang_complete_old/plugin/libclang.py	/^class CompleteThread(threading.Thread):$/;"	c
CompletionChunk	clang_complete/plugin/clang/cindex.py	/^class CompletionChunk:$/;"	c
CompletionChunk	clang_complete_old/plugin/clang/cindex.py	/^class CompletionChunk:$/;"	c
CompletionString	clang_complete/plugin/clang/cindex.py	/^class CompletionString(ClangObject):$/;"	c
CompletionString	clang_complete_old/plugin/clang/cindex.py	/^class CompletionString(ClangObject):$/;"	c
Config	clang_complete/plugin/clang/cindex.py	/^class Config:$/;"	c
Config	clang_complete_old/plugin/clang/cindex.py	/^class Config:$/;"	c
Cursor	clang_complete/plugin/clang/cindex.py	/^class Cursor(Structure):$/;"	c
Cursor	clang_complete_old/plugin/clang/cindex.py	/^class Cursor(Structure):$/;"	c
CursorKind	clang_complete/plugin/clang/cindex.py	/^class CursorKind(object):$/;"	c
CursorKind	clang_complete_old/plugin/clang/cindex.py	/^class CursorKind(object):$/;"	c
DOTVIMRC	neobundle.vim/bin/neoinstall.bat	/^:DOTVIMRC$/;"	l
DOTVIMRC	neobundle.vim/bin/neoinstall_novimproc.bat	/^:DOTVIMRC$/;"	l
DiagIterator	clang_complete/plugin/clang/cindex.py	/^        class DiagIterator:$/;"	c	function:TranslationUnit.diagnostics
DiagIterator	clang_complete_old/plugin/clang/cindex.py	/^        class DiagIterator:$/;"	c	function:TranslationUnit.diagnostics
Diagnostic	clang_complete/plugin/clang/cindex.py	/^class Diagnostic(object):$/;"	c
Diagnostic	clang_complete_old/plugin/clang/cindex.py	/^class Diagnostic(object):$/;"	c
DiagnosticsItr	clang_complete/plugin/clang/cindex.py	/^        class DiagnosticsItr:$/;"	c	function:CodeCompletionResults.diagnostics
DiagnosticsItr	clang_complete_old/plugin/clang/cindex.py	/^        class DiagnosticsItr:$/;"	c	function:CodeCompletionResults.diagnostics
DoPeriodicQuickFix	clang_complete/plugin/clang_complete.vim	/^function! s:DoPeriodicQuickFix()$/;"	f
DoPeriodicQuickFix	clang_complete_old/plugin/clang_complete.vim	/^function! s:DoPeriodicQuickFix()$/;"	f
ERROR_CANNOTLOADDATABASE	clang_complete/plugin/clang/cindex.py	/^    ERROR_CANNOTLOADDATABASE = 1$/;"	v	class:CompilationDatabaseError
ERROR_CANNOTLOADDATABASE	clang_complete_old/plugin/clang/cindex.py	/^    ERROR_CANNOTLOADDATABASE = 1$/;"	v	class:CompilationDatabaseError
ERROR_INVALID_TU	clang_complete/plugin/clang/cindex.py	/^    ERROR_INVALID_TU = 3$/;"	v	class:TranslationUnitSaveError
ERROR_INVALID_TU	clang_complete_old/plugin/clang/cindex.py	/^    ERROR_INVALID_TU = 3$/;"	v	class:TranslationUnitSaveError
ERROR_TRANSLATION_ERRORS	clang_complete/plugin/clang/cindex.py	/^    ERROR_TRANSLATION_ERRORS = 2$/;"	v	class:TranslationUnitSaveError
ERROR_TRANSLATION_ERRORS	clang_complete_old/plugin/clang/cindex.py	/^    ERROR_TRANSLATION_ERRORS = 2$/;"	v	class:TranslationUnitSaveError
ERROR_UNKNOWN	clang_complete/plugin/clang/cindex.py	/^    ERROR_UNKNOWN = 0$/;"	v	class:CompilationDatabaseError
ERROR_UNKNOWN	clang_complete/plugin/clang/cindex.py	/^    ERROR_UNKNOWN = 1$/;"	v	class:TranslationUnitSaveError
ERROR_UNKNOWN	clang_complete_old/plugin/clang/cindex.py	/^    ERROR_UNKNOWN = 0$/;"	v	class:CompilationDatabaseError
ERROR_UNKNOWN	clang_complete_old/plugin/clang/cindex.py	/^    ERROR_UNKNOWN = 1$/;"	v	class:TranslationUnitSaveError
EXEC_NEOBUNDLE_INSTALL	neobundle.vim/bin/neoinstall.bat	/^:EXEC_NEOBUNDLE_INSTALL$/;"	l
EXEC_NEOBUNDLE_INSTALL	neobundle.vim/bin/neoinstall_novimproc.bat	/^:EXEC_NEOBUNDLE_INSTALL$/;"	l
Error	clang_complete/plugin/clang/cindex.py	/^    Error   = 3$/;"	v	class:Diagnostic
Error	clang_complete_old/plugin/clang/cindex.py	/^    Error   = 3$/;"	v	class:Diagnostic
FILES	clang_complete/Makefile	/^FILES	:= $(shell git ls-files autoload bin doc plugin)$/;"	m
FILES	clang_complete_old/Makefile	/^FILES	:= $(shell git ls-files autoload bin doc plugin)$/;"	m
Fatal	clang_complete/plugin/clang/cindex.py	/^    Fatal   = 4$/;"	v	class:Diagnostic
Fatal	clang_complete_old/plugin/clang/cindex.py	/^    Fatal   = 4$/;"	v	class:Diagnostic
File	clang_complete/plugin/clang/cindex.py	/^class File(ClangObject):$/;"	c
File	clang_complete_old/plugin/clang/cindex.py	/^class File(ClangObject):$/;"	c
FileInclusion	clang_complete/plugin/clang/cindex.py	/^class FileInclusion(object):$/;"	c
FileInclusion	clang_complete_old/plugin/clang/cindex.py	/^class FileInclusion(object):$/;"	c
FixIt	clang_complete/plugin/clang/cindex.py	/^class FixIt(object):$/;"	c
FixIt	clang_complete_old/plugin/clang/cindex.py	/^class FixIt(object):$/;"	c
FixItIterator	clang_complete/plugin/clang/cindex.py	/^        class FixItIterator:$/;"	c	function:Diagnostic.fixits
FixItIterator	clang_complete_old/plugin/clang/cindex.py	/^        class FixItIterator:$/;"	c	function:Diagnostic.fixits
GotoDeclaration	clang_complete/plugin/clang_complete.vim	/^function! s:GotoDeclaration(preview)$/;"	f
GotoDeclaration	clang_complete_old/plugin/clang_complete.vim	/^function! s:GotoDeclaration(preview)$/;"	f
HOME	neobundle.vim/bin/neoinstall.bat	/^if "%HOME%"=="" set HOME=%USERPROFILE%$/;"	v
HOME	neobundle.vim/bin/neoinstall_novimproc.bat	/^if "%HOME%"=="" set HOME=%USERPROFILE%$/;"	v
HandlePossibleSelectionCtrlY	clang_complete/plugin/clang_complete.vim	/^function! s:HandlePossibleSelectionCtrlY()$/;"	f
HandlePossibleSelectionCtrlY	clang_complete_old/plugin/clang_complete.vim	/^function! s:HandlePossibleSelectionCtrlY()$/;"	f
HandlePossibleSelectionEnter	clang_complete/plugin/clang_complete.vim	/^function! s:HandlePossibleSelectionEnter()$/;"	f
HandlePossibleSelectionEnter	clang_complete_old/plugin/clang_complete.vim	/^function! s:HandlePossibleSelectionEnter()$/;"	f
Ignored	clang_complete/plugin/clang/cindex.py	/^    Ignored = 0$/;"	v	class:Diagnostic
Ignored	clang_complete_old/plugin/clang/cindex.py	/^    Ignored = 0$/;"	v	class:Diagnostic
Index	clang_complete/plugin/clang/cindex.py	/^class Index(ClangObject):$/;"	c
Index	clang_complete_old/plugin/clang/cindex.py	/^class Index(ClangObject):$/;"	c
Kind	clang_complete/plugin/clang/cindex.py	/^    class Kind:$/;"	c	class:CompletionChunk
Kind	clang_complete_old/plugin/clang/cindex.py	/^    class Kind:$/;"	c	class:CompletionChunk
LaunchCompletion	clang_complete/plugin/clang_complete.vim	/^function! s:LaunchCompletion()$/;"	f
LaunchCompletion	clang_complete_old/plugin/clang_complete.vim	/^function! s:LaunchCompletion()$/;"	f
LibclangError	clang_complete/plugin/clang/cindex.py	/^class LibclangError(Exception):$/;"	c
LibclangError	clang_complete_old/plugin/clang/cindex.py	/^class LibclangError(Exception):$/;"	c
LoadUserOptions	clang_complete/plugin/clang_complete.vim	/^function! LoadUserOptions()$/;"	f
LoadUserOptions	clang_complete_old/plugin/clang_complete.vim	/^function! LoadUserOptions()$/;"	f
NO_EXEC_NEOBUNDLE_INSTALL	neobundle.vim/bin/neoinstall.bat	/^:NO_EXEC_NEOBUNDLE_INSTALL$/;"	l
NO_EXEC_NEOBUNDLE_INSTALL	neobundle.vim/bin/neoinstall_novimproc.bat	/^:NO_EXEC_NEOBUNDLE_INSTALL$/;"	l
NeoBundle	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundle$/;"	c
NeoBundleCheck	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleCheck$/;"	c
NeoBundleCheckUpdate	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleCheckUpdate$/;"	c
NeoBundleClearCache	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleClearCache$/;"	c
NeoBundleCount	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleCount$/;"	c
NeoBundleDirectInstall	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleDirectInstall$/;"	c
NeoBundleDisable	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleDisable$/;"	c
NeoBundleDocs	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleDocs$/;"	c
NeoBundleExtraEdit	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleExtraEdit$/;"	c
NeoBundleFetch	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleFetch$/;"	c
NeoBundleGC	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleGC$/;"	c
NeoBundleInstall	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleInstall$/;"	c
NeoBundleLazy	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleLazy$/;"	c
NeoBundleList	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleList$/;"	c
NeoBundleLoadCache	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleLoadCache$/;"	c
NeoBundleLocal	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleLocal$/;"	c
NeoBundleLock	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleLock$/;"	c
NeoBundleLog	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleLog$/;"	c
NeoBundleReinstall	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleReinstall$/;"	c
NeoBundleRemotePlugins	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleRemotePlugins$/;"	c
NeoBundleRollback	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleRollback$/;"	c
NeoBundleSaveCache	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleSaveCache$/;"	c
NeoBundleSource	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleSource$/;"	c
NeoBundleUpdate	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleUpdate$/;"	c
NeoBundleUpdatesLog	neobundle.vim/autoload/neobundle.vim	/^      \\ NeoBundleUpdatesLog$/;"	c
NeoCompleteBufferMakeCache	neocomplete/plugin/neocomplete/buffer.vim	/^      \\ NeoCompleteBufferMakeCache$/;"	c
NeoCompleteClean	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteClean$/;"	c
NeoCompleteDictionaryMakeCache	neocomplete/plugin/neocomplete/dictionary.vim	/^      \\ NeoCompleteDictionaryMakeCache$/;"	c
NeoCompleteDisable	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteDisable$/;"	c
NeoCompleteEnable	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteEnable$/;"	c
NeoCompleteLock	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteLock$/;"	c
NeoCompleteMemberMakeCache	neocomplete/plugin/neocomplete/member.vim	/^      \\ NeoCompleteMemberMakeCache$/;"	c
NeoCompleteSetFileType	neocomplete/plugin/neocomplete.vim	/^command! -nargs=1 -bar -complete=filetype NeoCompleteSetFileType$/;"	c
NeoCompleteTagMakeCache	neocomplete/plugin/neocomplete/tag.vim	/^      \\ NeoCompleteTagMakeCache$/;"	c
NeoCompleteToggle	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteToggle$/;"	c
NeoCompleteUnlock	neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteUnlock$/;"	c
Note	clang_complete/plugin/clang/cindex.py	/^    Note    = 1$/;"	v	class:Diagnostic
Note	clang_complete_old/plugin/clang/cindex.py	/^    Note    = 1$/;"	v	class:Diagnostic
ORIGIN_VIM	neobundle.vim/bin/neoinstall.bat	/^:ORIGIN_VIM$/;"	l
ORIGIN_VIM	neobundle.vim/bin/neoinstall_novimproc.bat	/^:ORIGIN_VIM$/;"	l
PARSE_CACHE_COMPLETION_RESULTS	clang_complete/plugin/clang/cindex.py	/^    PARSE_CACHE_COMPLETION_RESULTS = 8$/;"	v	class:TranslationUnit
PARSE_CACHE_COMPLETION_RESULTS	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_CACHE_COMPLETION_RESULTS = 8$/;"	v	class:TranslationUnit
PARSE_DETAILED_PROCESSING_RECORD	clang_complete/plugin/clang/cindex.py	/^    PARSE_DETAILED_PROCESSING_RECORD = 1$/;"	v	class:TranslationUnit
PARSE_DETAILED_PROCESSING_RECORD	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_DETAILED_PROCESSING_RECORD = 1$/;"	v	class:TranslationUnit
PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION	clang_complete/plugin/clang/cindex.py	/^    PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION = 128$/;"	v	class:TranslationUnit
PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION = 128$/;"	v	class:TranslationUnit
PARSE_INCOMPLETE	clang_complete/plugin/clang/cindex.py	/^    PARSE_INCOMPLETE = 2$/;"	v	class:TranslationUnit
PARSE_INCOMPLETE	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_INCOMPLETE = 2$/;"	v	class:TranslationUnit
PARSE_NONE	clang_complete/plugin/clang/cindex.py	/^    PARSE_NONE = 0$/;"	v	class:TranslationUnit
PARSE_NONE	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_NONE = 0$/;"	v	class:TranslationUnit
PARSE_PRECOMPILED_PREAMBLE	clang_complete/plugin/clang/cindex.py	/^    PARSE_PRECOMPILED_PREAMBLE = 4$/;"	v	class:TranslationUnit
PARSE_PRECOMPILED_PREAMBLE	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_PRECOMPILED_PREAMBLE = 4$/;"	v	class:TranslationUnit
PARSE_SKIP_FUNCTION_BODIES	clang_complete/plugin/clang/cindex.py	/^    PARSE_SKIP_FUNCTION_BODIES = 64$/;"	v	class:TranslationUnit
PARSE_SKIP_FUNCTION_BODIES	clang_complete_old/plugin/clang/cindex.py	/^    PARSE_SKIP_FUNCTION_BODIES = 64$/;"	v	class:TranslationUnit
RangeIterator	clang_complete/plugin/clang/cindex.py	/^        class RangeIterator:$/;"	c	function:Diagnostic.ranges
RangeIterator	clang_complete_old/plugin/clang/cindex.py	/^        class RangeIterator:$/;"	c	function:Diagnostic.ranges
SHELL	clang_complete/Makefile	/^SHELL	:= \/usr\/bin\/env bash$/;"	m
SHELL	clang_complete_old/Makefile	/^SHELL	:= \/usr\/bin\/env bash$/;"	m
ShouldComplete	clang_complete/plugin/clang_complete.vim	/^function! s:ShouldComplete()$/;"	f
ShouldComplete	clang_complete_old/plugin/clang_complete.vim	/^function! s:ShouldComplete()$/;"	f
Source	clang_complete_old/rplugin/python3/deoplete/sources/clang_complete.py	/^class Source(Base):$/;"	c
SourceLocation	clang_complete/plugin/clang/cindex.py	/^class SourceLocation(Structure):$/;"	c
SourceLocation	clang_complete_old/plugin/clang/cindex.py	/^class SourceLocation(Structure):$/;"	c
SourceRange	clang_complete/plugin/clang/cindex.py	/^class SourceRange(Structure):$/;"	c
SourceRange	clang_complete_old/plugin/clang/cindex.py	/^class SourceRange(Structure):$/;"	c
SpellingCache	clang_complete/plugin/clang/cindex.py	/^SpellingCache = {$/;"	v
SpellingCache	clang_complete_old/plugin/clang/cindex.py	/^SpellingCache = {$/;"	v
StopMonitoring	clang_complete/plugin/clang_complete.vim	/^function! s:StopMonitoring()$/;"	f
StopMonitoring	clang_complete_old/plugin/clang_complete.vim	/^function! s:StopMonitoring()$/;"	f
Token	clang_complete/plugin/clang/cindex.py	/^class Token(Structure):$/;"	c
Token	clang_complete_old/plugin/clang/cindex.py	/^class Token(Structure):$/;"	c
TokenGroup	clang_complete/plugin/clang/cindex.py	/^class TokenGroup(object):$/;"	c
TokenGroup	clang_complete_old/plugin/clang/cindex.py	/^class TokenGroup(object):$/;"	c
TokenKind	clang_complete/plugin/clang/cindex.py	/^class TokenKind(object):$/;"	c
TokenKind	clang_complete_old/plugin/clang/cindex.py	/^class TokenKind(object):$/;"	c
TokenKinds	clang_complete/plugin/clang/enumerations.py	/^TokenKinds = [$/;"	v
TokenKinds	clang_complete_old/plugin/clang/enumerations.py	/^TokenKinds = [$/;"	v
TranslationUnit	clang_complete/plugin/clang/cindex.py	/^class TranslationUnit(ClangObject):$/;"	c
TranslationUnit	clang_complete_old/plugin/clang/cindex.py	/^class TranslationUnit(ClangObject):$/;"	c
TranslationUnitLoadError	clang_complete/plugin/clang/cindex.py	/^class TranslationUnitLoadError(Exception):$/;"	c
TranslationUnitLoadError	clang_complete_old/plugin/clang/cindex.py	/^class TranslationUnitLoadError(Exception):$/;"	c
TranslationUnitSaveError	clang_complete/plugin/clang/cindex.py	/^class TranslationUnitSaveError(Exception):$/;"	c
TranslationUnitSaveError	clang_complete_old/plugin/clang/cindex.py	/^class TranslationUnitSaveError(Exception):$/;"	c
TriggerSnippet	clang_complete/plugin/clang_complete.vim	/^function! s:TriggerSnippet()$/;"	f
TriggerSnippet	clang_complete_old/plugin/clang_complete.vim	/^function! s:TriggerSnippet()$/;"	f
Type	clang_complete/plugin/clang/cindex.py	/^class Type(Structure):$/;"	c
Type	clang_complete_old/plugin/clang/cindex.py	/^class Type(Structure):$/;"	c
TypeKind	clang_complete/plugin/clang/cindex.py	/^class TypeKind(object):$/;"	c
TypeKind	clang_complete_old/plugin/clang/cindex.py	/^class TypeKind(object):$/;"	c
UltiSnips_Manager	clang_complete/plugin/snippets/ultisnips.py	/^  UltiSnips_Manager = SnippetManager($/;"	v
UltiSnips_Manager	clang_complete_old/plugin/snippets/ultisnips.py	/^  UltiSnips_Manager = SnippetManager($/;"	v
VIM	neobundle.vim/bin/neoinstall.bat	/^set VIM=%_VIM:\\vim.exe=%$/;"	v
VIM	neobundle.vim/bin/neoinstall_novimproc.bat	/^set VIM=%_VIM:\\vim.exe=%$/;"	v
VIMFILES	neobundle.vim/bin/neoinstall.bat	/^:VIMFILES$/;"	l
VIMFILES	neobundle.vim/bin/neoinstall_novimproc.bat	/^:VIMFILES$/;"	l
VIMRC	neobundle.vim/bin/neoinstall.bat	/^set VIMRC=%HOME%\\.vimrc$/;"	v
VIMRC	neobundle.vim/bin/neoinstall.bat	/^set VIMRC=%HOME%\\vimfiles\\vimrc$/;"	v
VIMRC	neobundle.vim/bin/neoinstall.bat	/^set VIMRC=%VIM%\\_vimrc$/;"	v
VIMRC	neobundle.vim/bin/neoinstall_novimproc.bat	/^set VIMRC=%HOME%\\.vimrc$/;"	v
VIMRC	neobundle.vim/bin/neoinstall_novimproc.bat	/^set VIMRC=%HOME%\\vimfiles\\vimrc$/;"	v
VIMRC	neobundle.vim/bin/neoinstall_novimproc.bat	/^set VIMRC=%VIM%\\_vimrc$/;"	v
WarmupCache	clang_complete/plugin/libclang.py	/^def WarmupCache():$/;"	f
WarmupCache	clang_complete_old/plugin/libclang.py	/^def WarmupCache():$/;"	f
Warning	clang_complete/plugin/clang/cindex.py	/^    Warning = 2$/;"	v	class:Diagnostic
Warning	clang_complete_old/plugin/clang/cindex.py	/^    Warning = 2$/;"	v	class:Diagnostic
_CXString	clang_complete/plugin/clang/cindex.py	/^class _CXString(Structure):$/;"	c
_CXString	clang_complete_old/plugin/clang/cindex.py	/^class _CXString(Structure):$/;"	c
_CXUnsavedFile	clang_complete/plugin/clang/cindex.py	/^class _CXUnsavedFile(Structure):$/;"	c
_CXUnsavedFile	clang_complete_old/plugin/clang/cindex.py	/^class _CXUnsavedFile(Structure):$/;"	c
_SID	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^  function! s:_SID() abort$/;"	f
_SID	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_SID() abort$/;"	f
_SID	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_SID() abort$/;"	f
_SID	neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:_SID() abort$/;"	f
_SID	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
_SID	neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_SID() abort$/;"	f
_VIMRC	neobundle.vim/bin/neoinstall.bat	/^set _VIMRC=%HOME%\\_vimrc$/;"	v
_VIMRC	neobundle.vim/bin/neoinstall_novimproc.bat	/^set _VIMRC=%HOME%\\_vimrc$/;"	v
__all__	clang_complete/plugin/clang/__init__.py	/^__all__ = ['cindex']$/;"	v
__all__	clang_complete/plugin/clang/cindex.py	/^__all__ = [$/;"	v
__all__	clang_complete/plugin/clang/enumerations.py	/^__all__ = ['TokenKinds']$/;"	v
__all__	clang_complete/plugin/snippets/__init__.py	/^__all__ = ['clang_complete', 'ultisnips', 'dummy']$/;"	v
__all__	clang_complete_old/plugin/clang/__init__.py	/^__all__ = ['cindex']$/;"	v
__all__	clang_complete_old/plugin/clang/cindex.py	/^__all__ = [$/;"	v
__all__	clang_complete_old/plugin/clang/enumerations.py	/^__all__ = ['TokenKinds']$/;"	v
__all__	clang_complete_old/plugin/snippets/__init__.py	/^__all__ = ['clang_complete', 'ultisnips', 'dummy']$/;"	v
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CodeCompletionResults	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompilationDatabase	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompileCommands	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Diagnostic	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Index	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TokenGroup	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TranslationUnit	file:
__del__	clang_complete/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:_CXString	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CodeCompletionResults	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompilationDatabase	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:CompileCommands	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Diagnostic	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:Index	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TokenGroup	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:TranslationUnit	file:
__del__	clang_complete_old/plugin/clang/cindex.py	/^    def __del__(self):$/;"	m	class:_CXString	file:
__eq__	clang_complete/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Cursor	file:
__eq__	clang_complete/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceLocation	file:
__eq__	clang_complete/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceRange	file:
__eq__	clang_complete/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Type	file:
__eq__	clang_complete_old/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Cursor	file:
__eq__	clang_complete_old/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceLocation	file:
__eq__	clang_complete_old/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:SourceRange	file:
__eq__	clang_complete_old/plugin/clang/cindex.py	/^    def __eq__(self, other):$/;"	m	class:Type	file:
__get__	clang_complete/plugin/clang/cindex.py	/^    def __get__(self, instance, instance_type=None):$/;"	m	class:CachedProperty	file:
__get__	clang_complete_old/plugin/clang/cindex.py	/^    def __get__(self, instance, instance_type=None):$/;"	m	class:CachedProperty	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.fixits.FixItIterator	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.ranges.RangeIterator	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Type.argument_types.ArgumentsIterator	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^    def __getitem__(self, i):$/;"	m	class:CompileCommands	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CCRStructure	file:
__getitem__	clang_complete/plugin/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CompletionString	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.fixits.FixItIterator	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Diagnostic.ranges.RangeIterator	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^            def __getitem__(self, key):$/;"	m	class:Type.argument_types.ArgumentsIterator	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^    def __getitem__(self, i):$/;"	m	class:CompileCommands	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CCRStructure	file:
__getitem__	clang_complete_old/plugin/clang/cindex.py	/^    def __getitem__(self, key):$/;"	m	class:CompletionString	file:
__init__	clang_complete/plugin/clang/cindex.py	/^            def __init__(self, ccr):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr
__init__	clang_complete/plugin/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.fixits.FixItIterator
__init__	clang_complete/plugin/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.ranges.RangeIterator
__init__	clang_complete/plugin/clang/cindex.py	/^            def __init__(self, parent):$/;"	m	class:Type.argument_types.ArgumentsIterator
__init__	clang_complete/plugin/clang/cindex.py	/^            def __init__(self, tu):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator
__init__	clang_complete/plugin/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionChunk.Kind
__init__	clang_complete/plugin/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionString.Availability
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, ccmds):$/;"	m	class:CompileCommands
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, cmd, ccmds):$/;"	m	class:CompileCommand
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, completionString, key):$/;"	m	class:CompletionChunk
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:CompilationDatabaseError
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:TranslationUnitSaveError
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, message):$/;"	m	class:LibclangError
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, obj):$/;"	m	class:ClangObject
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:CodeCompletionResults
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:Diagnostic
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, ptr, index):$/;"	m	class:TranslationUnit
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, range, value):$/;"	m	class:FixIt
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, src, tgt, loc, depth):$/;"	m	class:FileInclusion
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, tu, memory, count):$/;"	m	class:TokenGroup
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:CursorKind
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:TypeKind
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, value, name):$/;"	m	class:TokenKind
__init__	clang_complete/plugin/clang/cindex.py	/^    def __init__(self, wrapped):$/;"	m	class:CachedProperty
__init__	clang_complete/plugin/libclang.py	/^  def __init__(self, debug, file, line, column, params):$/;"	m	class:CodeCompleteTimer
__init__	clang_complete/plugin/libclang.py	/^  def __init__(self, line, column, currentFile, fileName, params, timer):$/;"	m	class:CompleteThread
__init__	clang_complete_old/plugin/clang/cindex.py	/^            def __init__(self, ccr):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr
__init__	clang_complete_old/plugin/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.fixits.FixItIterator
__init__	clang_complete_old/plugin/clang/cindex.py	/^            def __init__(self, diag):$/;"	m	class:Diagnostic.ranges.RangeIterator
__init__	clang_complete_old/plugin/clang/cindex.py	/^            def __init__(self, parent):$/;"	m	class:Type.argument_types.ArgumentsIterator
__init__	clang_complete_old/plugin/clang/cindex.py	/^            def __init__(self, tu):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator
__init__	clang_complete_old/plugin/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionChunk.Kind
__init__	clang_complete_old/plugin/clang/cindex.py	/^        def __init__(self, name):$/;"	m	class:CompletionString.Availability
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, ccmds):$/;"	m	class:CompileCommands
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, cmd, ccmds):$/;"	m	class:CompileCommand
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, completionString, key):$/;"	m	class:CompletionChunk
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:CompilationDatabaseError
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, enumeration, message):$/;"	m	class:TranslationUnitSaveError
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, message):$/;"	m	class:LibclangError
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, obj):$/;"	m	class:ClangObject
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:CodeCompletionResults
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, ptr):$/;"	m	class:Diagnostic
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, ptr, index):$/;"	m	class:TranslationUnit
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, range, value):$/;"	m	class:FixIt
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, src, tgt, loc, depth):$/;"	m	class:FileInclusion
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, tu, memory, count):$/;"	m	class:TokenGroup
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:CursorKind
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, value):$/;"	m	class:TypeKind
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, value, name):$/;"	m	class:TokenKind
__init__	clang_complete_old/plugin/clang/cindex.py	/^    def __init__(self, wrapped):$/;"	m	class:CachedProperty
__init__	clang_complete_old/plugin/libclang.py	/^  def __init__(self, debug, file, line, column, params):$/;"	m	class:CodeCompleteTimer
__init__	clang_complete_old/plugin/libclang.py	/^  def __init__(self, line, column, currentFile, fileName, params, timer):$/;"	m	class:CompleteThread
__init__	clang_complete_old/rplugin/python3/deoplete/sources/clang_complete.py	/^    def __init__(self, vim):$/;"	m	class:Source
__kindNumber	clang_complete/plugin/clang/cindex.py	/^    def __kindNumber(self):$/;"	m	class:CompletionChunk	file:
__kindNumber	clang_complete_old/plugin/clang/cindex.py	/^    def __kindNumber(self):$/;"	m	class:CompletionChunk	file:
__len__	clang_complete/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr	file:
__len__	clang_complete/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.fixits.FixItIterator	file:
__len__	clang_complete/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.ranges.RangeIterator	file:
__len__	clang_complete/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator	file:
__len__	clang_complete/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Type.argument_types.ArgumentsIterator	file:
__len__	clang_complete/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CCRStructure	file:
__len__	clang_complete/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompileCommands	file:
__len__	clang_complete/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompletionString	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:CodeCompletionResults.diagnostics.DiagnosticsItr	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.fixits.FixItIterator	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Diagnostic.ranges.RangeIterator	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:TranslationUnit.diagnostics.DiagIterator	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^            def __len__(self):$/;"	m	class:Type.argument_types.ArgumentsIterator	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CCRStructure	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompileCommands	file:
__len__	clang_complete_old/plugin/clang/cindex.py	/^    def __len__(self):$/;"	m	class:CompletionString	file:
__ne__	clang_complete/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Cursor	file:
__ne__	clang_complete/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceLocation	file:
__ne__	clang_complete/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceRange	file:
__ne__	clang_complete/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Type	file:
__ne__	clang_complete_old/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Cursor	file:
__ne__	clang_complete_old/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceLocation	file:
__ne__	clang_complete_old/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:SourceRange	file:
__ne__	clang_complete_old/plugin/clang/cindex.py	/^    def __ne__(self, other):$/;"	m	class:Type	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionChunk.Kind	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionString.Availability	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CodeCompletionResult	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionChunk	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionString	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CursorKind	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:Diagnostic	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:File	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:FixIt	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceLocation	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceRange	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TokenKind	file:
__repr__	clang_complete/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TypeKind	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionChunk.Kind	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^        def __repr__(self):$/;"	m	class:CompletionString.Availability	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CodeCompletionResult	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionChunk	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CompletionString	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:CursorKind	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:Diagnostic	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:File	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:FixIt	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceLocation	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:SourceRange	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TokenKind	file:
__repr__	clang_complete_old/plugin/clang/cindex.py	/^    def __repr__(self):$/;"	m	class:TypeKind	file:
__str__	clang_complete/plugin/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionChunk.Kind	file:
__str__	clang_complete/plugin/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionString.Availability	file:
__str__	clang_complete/plugin/clang/cindex.py	/^    def __str__(self):$/;"	m	class:File	file:
__str__	clang_complete/plugin/clang/cindex.py	/^    def __str__(self):$/;"	m	class:LibclangError	file:
__str__	clang_complete_old/plugin/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionChunk.Kind	file:
__str__	clang_complete_old/plugin/clang/cindex.py	/^        def __str__(self):$/;"	m	class:CompletionString.Availability	file:
__str__	clang_complete_old/plugin/clang/cindex.py	/^    def __str__(self):$/;"	m	class:File	file:
__str__	clang_complete_old/plugin/clang/cindex.py	/^    def __str__(self):$/;"	m	class:LibclangError	file:
_array	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_array(input) abort$/;"	f
_array_of_tables	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_array_of_tables(input) abort$/;"	f
_basic_string	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_basic_string(input) abort$/;"	f
_boolean	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_boolean(input) abort$/;"	f
_compare	neobundle.vim/autoload/neobundle/util.vim	/^function! s:_compare(a, b) abort$/;"	f
_compare	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:_compare(a, b) abort$/;"	f
_compare	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
_consume	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_consume(input, pattern) abort$/;"	f
_create_hash	neobundle.vim/autoload/neobundle/cache.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
_create_hash	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
_data	clang_complete/plugin/clang/cindex.py	/^    _data = None$/;"	v	class:SourceLocation
_data	clang_complete_old/plugin/clang/cindex.py	/^    _data = None$/;"	v	class:SourceLocation
_datetime	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_datetime(input) abort$/;"	f
_default_compare	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
_encode_name	neobundle.vim/autoload/neobundle/cache.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
_encode_name	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
_eof	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_eof(input) abort$/;"	f
_equals	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_equals(input) abort$/;"	f
_error	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_error(input) abort$/;"	f
_exponent	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_exponent(input) abort$/;"	f
_extract_files	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [$/;"	v	class:SourceRange
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [$/;"	v	class:Token
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("data", c_void_p * 2)]$/;"	v	class:Type
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("xdata", c_int), ("data", c_void_p * 3)]$/;"	v	class:Cursor
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [("name", c_char_p), ("contents", c_char_p), ('length', c_ulong)]$/;"	v	class:_CXUnsavedFile
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [("ptr_data", c_void_p * 2), ("int_data", c_uint)]$/;"	v	class:SourceLocation
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [("spelling", c_char_p), ("free", c_int)]$/;"	v	class:_CXString
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [('cursorKind', c_int), ('completionString', c_object_p)]$/;"	v	class:CodeCompletionResult
_fields_	clang_complete/plugin/clang/cindex.py	/^    _fields_ = [('results', POINTER(CodeCompletionResult)),$/;"	v	class:CCRStructure
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [$/;"	v	class:SourceRange
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [$/;"	v	class:Token
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("data", c_void_p * 2)]$/;"	v	class:Type
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [("_kind_id", c_int), ("xdata", c_int), ("data", c_void_p * 3)]$/;"	v	class:Cursor
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [("name", c_char_p), ("contents", c_char_p), ('length', c_ulong)]$/;"	v	class:_CXUnsavedFile
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [("ptr_data", c_void_p * 2), ("int_data", c_uint)]$/;"	v	class:SourceLocation
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [("spelling", c_char_p), ("free", c_int)]$/;"	v	class:_CXString
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [('cursorKind', c_int), ('completionString', c_object_p)]$/;"	v	class:CodeCompletionResult
_fields_	clang_complete_old/plugin/clang/cindex.py	/^    _fields_ = [('results', POINTER(CodeCompletionResult)),$/;"	v	class:CCRStructure
_file2module	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_file2module(file) abort$/;"	f
_float	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_float(input) abort$/;"	f
_fractional	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_fractional(input) abort$/;"	f
_function	neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_function(fstr) abort$/;"	f
_get_instantiation	clang_complete/plugin/clang/cindex.py	/^    def _get_instantiation(self):$/;"	m	class:SourceLocation
_get_instantiation	clang_complete_old/plugin/clang/cindex.py	/^    def _get_instantiation(self):$/;"	m	class:SourceLocation
_get_latest_module	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_get_latest_module(name) abort$/;"	f
_get_module	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_get_module(name) abort dict$/;"	f
_global_vital_files	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_global_vital_files() abort$/;"	f
_import	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_import(name) abort dict$/;"	f
_integer	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_integer(input) abort$/;"	f
_key	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_key(input) abort$/;"	f
_kinds	clang_complete/plugin/clang/cindex.py	/^    _kinds = []$/;"	v	class:CursorKind
_kinds	clang_complete/plugin/clang/cindex.py	/^    _kinds = []$/;"	v	class:TypeKind
_kinds	clang_complete_old/plugin/clang/cindex.py	/^    _kinds = []$/;"	v	class:CursorKind
_kinds	clang_complete_old/plugin/clang/cindex.py	/^    _kinds = []$/;"	v	class:TypeKind
_literal	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_literal(input) abort$/;"	f
_match	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_match(input, pattern) abort$/;"	f
_module_sid	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_sid_base_dir	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_multiline_basic_string	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_multiline_basic_string(input) abort$/;"	f
_multiline_literal	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_multiline_literal(input) abort$/;"	f
_name_map	clang_complete/plugin/clang/cindex.py	/^    _name_map = None$/;"	v	class:CursorKind
_name_map	clang_complete/plugin/clang/cindex.py	/^    _name_map = None$/;"	v	class:TypeKind
_name_map	clang_complete_old/plugin/clang/cindex.py	/^    _name_map = None$/;"	v	class:CursorKind
_name_map	clang_complete_old/plugin/clang/cindex.py	/^    _name_map = None$/;"	v	class:TypeKind
_nr2char	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_nr2char(nr) abort$/;"	f
_pad_with_char	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
_parse	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_parse(input) abort$/;"	f
_path2project_directory_git	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
_path2project_directory_others	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
_path2project_directory_svn	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
_put_array	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_put_array(dict, key, value) abort$/;"	f
_put_dict	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_put_dict(dict, key, value) abort$/;"	f
_redir	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_redir(cmd) abort$/;"	f
_replace	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
_self_vital_files	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_self_vital_files() abort$/;"	f
_sfuncname	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_sid	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_sid(fullpath, filter_pattern) abort$/;"	f
_skip	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_skip(input) abort$/;"	f
_source	neocomplete/autoload/vital/neocomplete.vim	/^function! s:_source(path) abort$/;"	f
_split_by_wcswidth	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
_split_by_wcswidth_once	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_table	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_table(input) abort$/;"	f
_unescape	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_unescape(text) abort$/;"	f
_unify_path	neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_unify_path(path) abort$/;"	f
_uniq	neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_uniq(list) abort$/;"	f
_value	neobundle.vim/autoload/neobundle/TOML.vim	/^function! s:_value(input) abort$/;"	f
_value_map	clang_complete/plugin/clang/cindex.py	/^    _value_map = {} # int -> TokenKind$/;"	v	class:TokenKind
_value_map	clang_complete_old/plugin/clang/cindex.py	/^    _value_map = {} # int -> TokenKind$/;"	v	class:TokenKind
_vital_depends	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_loaded	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_warn_deprecated	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
_wcwidth	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
_wcwidth	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
add_depends	neobundle.vim/autoload/neobundle/config.vim	/^function! s:add_depends(bundle) abort "{{{$/;"	f
add_dummy_commands	neobundle.vim/autoload/neobundle/config.vim	/^function! s:add_dummy_commands(bundle) abort "{{{$/;"	f
add_dummy_mappings	neobundle.vim/autoload/neobundle/config.vim	/^function! s:add_dummy_mappings(bundle) abort "{{{$/;"	f
all	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
and	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:and(xs) abort$/;"	f
any	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
append_log_file	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:append_log_file(msg) abort "{{{$/;"	f
args	clang_complete/bin/cc_args.py	/^args = parseArguments(sys.argv)$/;"	v
args	clang_complete_old/bin/cc_args.py	/^args = parseArguments(sys.argv)$/;"	v
argument_types	clang_complete/plugin/clang/cindex.py	/^    def argument_types(self):$/;"	m	class:Type
argument_types	clang_complete_old/plugin/clang/cindex.py	/^    def argument_types(self):$/;"	m	class:Type
arguments	clang_complete/plugin/clang/cindex.py	/^    def arguments(self):$/;"	m	class:CompileCommand
arguments	clang_complete_old/plugin/clang/cindex.py	/^    def arguments(self):$/;"	m	class:CompileCommand
async_load	neocomplete/autoload/neocomplete/cache.vim	/^function! s:async_load(argv, cache_dir, filename) abort "{{{$/;"	f
async_system	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:async_system(cmd) abort "{{{$/;"	f
availability	clang_complete/plugin/clang/cindex.py	/^    def availability(self):$/;"	m	class:CompletionString
availability	clang_complete_old/plugin/clang/cindex.py	/^    def availability(self):$/;"	m	class:CompletionString
availabilityKinds	clang_complete/plugin/clang/cindex.py	/^availabilityKinds = {$/;"	v
availabilityKinds	clang_complete_old/plugin/clang/cindex.py	/^availabilityKinds = {$/;"	v
b:clang_parameters	clang_complete/plugin/clang_complete.vim	/^let b:clang_parameters = ''$/;"	v
b:clang_parameters	clang_complete_old/plugin/clang_complete.vim	/^let b:clang_parameters = ''$/;"	v
b:clang_user_options	clang_complete/plugin/clang_complete.vim	/^let b:clang_user_options = ''$/;"	v
b:clang_user_options	clang_complete_old/plugin/clang_complete.vim	/^let b:clang_user_options = ''$/;"	v
b:col	clang_complete/plugin/clang_complete.vim	/^let b:col = 0$/;"	v
b:col	clang_complete_old/plugin/clang_complete.vim	/^let b:col = 0$/;"	v
b:my_changedtick	clang_complete/plugin/clang_complete.vim	/^let b:my_changedtick = 0$/;"	v
b:my_changedtick	clang_complete_old/plugin/clang_complete.vim	/^let b:my_changedtick = 0$/;"	v
binary_search	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
break	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
briefComment	clang_complete/plugin/clang/cindex.py	/^    def briefComment(self):$/;"	m	class:CompletionString
briefComment	clang_complete_old/plugin/clang/cindex.py	/^    def briefComment(self):$/;"	m	class:CompletionString
builtinHeaderPath	clang_complete/plugin/libclang.py	/^builtinHeaderPath = None$/;"	v
c_object_p	clang_complete/plugin/clang/cindex.py	/^c_object_p = POINTER(c_void_p)$/;"	v
c_object_p	clang_complete_old/plugin/clang/cindex.py	/^c_object_p = POINTER(c_void_p)$/;"	v
callbacks	clang_complete/plugin/clang/cindex.py	/^callbacks = {}$/;"	v
callbacks	clang_complete_old/plugin/clang/cindex.py	/^callbacks = {}$/;"	v
canFindBuiltinHeaders	clang_complete/plugin/libclang.py	/^def canFindBuiltinHeaders(index, args = []):$/;"	f
canFindBuiltinHeaders	clang_complete_old/plugin/libclang.py	/^def canFindBuiltinHeaders(index, args = []):$/;"	f
canonical	clang_complete/plugin/clang/cindex.py	/^    def canonical(self):$/;"	m	class:Cursor
canonical	clang_complete_old/plugin/clang/cindex.py	/^    def canonical(self):$/;"	m	class:Cursor
category_name	clang_complete/plugin/clang/cindex.py	/^    def category_name(self):$/;"	m	class:Diagnostic
category_name	clang_complete_old/plugin/clang/cindex.py	/^    def category_name(self):$/;"	m	class:Diagnostic
category_number	clang_complete/plugin/clang/cindex.py	/^    def category_number(self):$/;"	m	class:Diagnostic
category_number	clang_complete_old/plugin/clang/cindex.py	/^    def category_number(self):$/;"	m	class:Diagnostic
char_range	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
check_async_cache	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_async_cache(context) abort "{{{$/;"	f
check_changed_buffer	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_changed_buffer(bufnr) abort "{{{$/;"	f
check_fallback	neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_fallback(cur_text) abort "{{{$/;"	f
check_force_omni	neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_force_omni(cur_text) abort "{{{$/;"	f
check_in_do_auto_complete	neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_in_do_auto_complete(event) abort "{{{$/;"	f
check_old_cache	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
check_really_clean	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:check_really_clean(dirs) abort "{{{$/;"	f
check_source	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_source() abort "{{{$/;"	f
check_update_init	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:check_update_init(bundle, context, is_unite) abort "{{{$/;"	f
check_update_process	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:check_update_process(context, process, is_unite) abort "{{{$/;"	f
check_version	neobundle.vim/autoload/neobundle/init.vim	/^function! s:check_version(min_version) abort "{{{$/;"	f
chomp	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
chop	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
clean	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:clean() abort "{{{$/;"	f
clear	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:clear(list) abort$/;"	f
clear_dummy	neobundle.vim/autoload/neobundle/config.vim	/^function! s:clear_dummy(bundle) abort "{{{$/;"	f
close_preview_window	neocomplete/autoload/neocomplete/handler.vim	/^function! s:close_preview_window() abort "{{{$/;"	f
cmp_vimproc	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:cmp_vimproc(a, b) abort "{{{$/;"	f
codeComplete	clang_complete/plugin/clang/cindex.py	/^    def codeComplete(self, path, line, column, unsaved_files=None,$/;"	m	class:TranslationUnit
codeComplete	clang_complete_old/plugin/clang/cindex.py	/^    def codeComplete(self, path, line, column, unsaved_files=None,$/;"	m	class:TranslationUnit
column	clang_complete/plugin/clang/cindex.py	/^    def column(self):$/;"	m	class:SourceLocation
column	clang_complete_old/plugin/clang/cindex.py	/^    def column(self):$/;"	m	class:SourceLocation
combinations	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
common_head	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
comp_bundle	neobundle.vim/test/tsort.vim	/^function! s:comp_bundle(bundle1, bundle2) abort$/;"	f
compare	neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! s:compare(i1, i2) abort$/;"	f
compare	neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! s:compare(i1, i2) abort$/;"	f
compare_filename	neobundle.vim/autoload/neobundle/util.vim	/^function! s:compare_filename(i1, i2) abort$/;"	f
compare_source_rank	neocomplete/autoload/neocomplete/complete.vim	/^function! s:compare_source_rank(i1, i2) abort$/;"	f
compatibility_check	clang_complete/plugin/clang/cindex.py	/^    compatibility_check = True$/;"	v	class:Config
compatibility_check	clang_complete_old/plugin/clang/cindex.py	/^    compatibility_check = True$/;"	v	class:Config
compilation_database	clang_complete/plugin/libclang.py	/^compilation_database = None$/;"	v
complete_delay	neocomplete/autoload/neocomplete/handler.vim	/^function! s:complete_delay(timer) abort "{{{$/;"	f
complete_flags	clang_complete/plugin/libclang.py	/^complete_flags = None$/;"	v
complete_key	neocomplete/autoload/neocomplete/handler.vim	/^function! s:complete_key(key) abort "{{{$/;"	f
completionChunkKindMap	clang_complete/plugin/clang/cindex.py	/^completionChunkKindMap = {$/;"	v
completionChunkKindMap	clang_complete_old/plugin/clang/cindex.py	/^completionChunkKindMap = {$/;"	v
concat	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:concat(list) abort$/;"	f
conf	clang_complete/plugin/clang/cindex.py	/^conf = Config()$/;"	v
conf	clang_complete_old/plugin/clang/cindex.py	/^conf = Config()$/;"	v
configuration	clang_complete/bin/cc_args.py	/^configuration = readConfiguration()$/;"	v
configuration	clang_complete_old/bin/cc_args.py	/^configuration = readConfiguration()$/;"	v
conj	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
cons	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
contains_multibyte	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
convert2script_type	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^function! s:convert2script_type(type) abort "{{{$/;"	f
convert2script_type	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^function! s:convert2script_type(type) abort "{{{$/;"	f
convert_metadata	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^function! s:convert_metadata(data) abort "{{{$/;"	f
convert_vim_scripts_data	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^function! s:convert_vim_scripts_data(data) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
converter.filter	neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
create	clang_complete/plugin/clang/cindex.py	/^    def create(excludeDecls=False):$/;"	m	class:Index
create	clang_complete_old/plugin/clang/cindex.py	/^    def create(excludeDecls=False):$/;"	m	class:Index
cursor	clang_complete/plugin/clang/cindex.py	/^    def cursor(self):$/;"	m	class:Token
cursor	clang_complete/plugin/clang/cindex.py	/^    def cursor(self):$/;"	m	class:TranslationUnit
cursor	clang_complete_old/plugin/clang/cindex.py	/^    def cursor(self):$/;"	m	class:Token
cursor	clang_complete_old/plugin/clang/cindex.py	/^    def cursor(self):$/;"	m	class:TranslationUnit
decode	clang_complete/plugin/libclang.py	/^def decode(value):$/;"	f
delete	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
deletefile	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
diagnostics	clang_complete/plugin/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:CodeCompletionResults
diagnostics	clang_complete/plugin/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:TranslationUnit
diagnostics	clang_complete_old/plugin/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:CodeCompletionResults
diagnostics	clang_complete_old/plugin/clang/cindex.py	/^    def diagnostics(self):$/;"	m	class:TranslationUnit
diffidx	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
directory	clang_complete/plugin/clang/cindex.py	/^    def directory(self):$/;"	m	class:CompileCommand
directory	clang_complete_old/plugin/clang/cindex.py	/^    def directory(self):$/;"	m	class:CompileCommand
disable_option	clang_complete/plugin/clang/cindex.py	/^    def disable_option(self):$/;"	m	class:Diagnostic
disable_option	clang_complete_old/plugin/clang/cindex.py	/^    def disable_option(self):$/;"	m	class:Diagnostic
displayname	clang_complete/plugin/clang/cindex.py	/^    def displayname(self):$/;"	m	class:Cursor
displayname	clang_complete_old/plugin/clang/cindex.py	/^    def displayname(self):$/;"	m	class:Cursor
do_auto_complete	neocomplete/autoload/neocomplete/handler.vim	/^function! s:do_auto_complete(event) abort "{{{$/;"	f
dstring	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
echo	neobundle.vim/autoload/neobundle/util.vim	/^function! s:echo(expr, mode) abort "{{{$/;"	f
echo_mode	neobundle.vim/autoload/neobundle/util.vim	/^function! s:echo_mode(m, mode) abort "{{{$/;"	f
element_count	clang_complete/plugin/clang/cindex.py	/^    def element_count(self):$/;"	m	class:Type
element_count	clang_complete_old/plugin/clang/cindex.py	/^    def element_count(self):$/;"	m	class:Type
element_type	clang_complete/plugin/clang/cindex.py	/^    def element_type(self):$/;"	m	class:Type
element_type	clang_complete_old/plugin/clang/cindex.py	/^    def element_type(self):$/;"	m	class:Type
encode	clang_complete/plugin/clang/cindex.py	/^def encode(value):$/;"	f
end	clang_complete/plugin/clang/cindex.py	/^    def end(self):$/;"	m	class:SourceRange
end	clang_complete_old/plugin/clang/cindex.py	/^    def end(self):$/;"	m	class:SourceRange
ends_with	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
enum_type	clang_complete/plugin/clang/cindex.py	/^    def enum_type(self):$/;"	m	class:Cursor
enum_type	clang_complete_old/plugin/clang/cindex.py	/^    def enum_type(self):$/;"	m	class:Cursor
enum_value	clang_complete/plugin/clang/cindex.py	/^    def enum_value(self):$/;"	m	class:Cursor
enum_value	clang_complete_old/plugin/clang/cindex.py	/^    def enum_value(self):$/;"	m	class:Cursor
escape	neobundle.vim/autoload/neobundle/util.vim	/^function! s:escape(path) abort"{{{$/;"	f
escape	neocomplete/autoload/neocomplete/util.vim	/^function! s:escape(path) abort"{{{$/;"	f
escapeCommand	clang_complete/plugin/clang_complete.vim	/^function! s:escapeCommand(command)$/;"	f
escapeCommand	clang_complete_old/plugin/clang_complete.vim	/^function! s:escapeCommand(command)$/;"	f
escape_file_searching	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
escape_pattern	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
escape_pattern	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
exists	neocomplete/autoload/vital/neocomplete.vim	/^function! s:exists(name) abort dict$/;"	f
exists_current_source	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:exists_current_source() abort "{{{$/;"	f
extent	clang_complete/plugin/clang/cindex.py	/^    def extent(self):$/;"	m	class:Cursor
extent	clang_complete/plugin/clang/cindex.py	/^    def extent(self):$/;"	m	class:Token
extent	clang_complete_old/plugin/clang/cindex.py	/^    def extent(self):$/;"	m	class:Cursor
extent	clang_complete_old/plugin/clang/cindex.py	/^    def extent(self):$/;"	m	class:Token
file	clang_complete/plugin/clang/cindex.py	/^    def file(self):$/;"	m	class:SourceLocation
file	clang_complete_old/plugin/clang/cindex.py	/^    def file(self):$/;"	m	class:SourceLocation
filereadable	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
filetype_off	neobundle.vim/autoload/neobundle/config.vim	/^function! s:filetype_off() abort "{{{$/;"	f
filter.filter	neobundle.vim/autoload/neobundle/sources/github.vim	/^function! s:filter.filter(candidates, context) abort$/;"	f
find	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
findCompilationDatase	clang_complete/plugin/clang_complete.vim	/^function! s:findCompilationDatase(cdb)$/;"	f
findCompilationDatase	clang_complete_old/plugin/clang_complete.vim	/^function! s:findCompilationDatase(cdb)$/;"	f
find_index	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_indices	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
find_last_index	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
finish	clang_complete/plugin/libclang.py	/^  def finish(self):$/;"	m	class:CodeCompleteTimer
finish	clang_complete_old/plugin/libclang.py	/^  def finish(self):$/;"	m	class:CodeCompleteTimer
fixits	clang_complete/plugin/clang/cindex.py	/^    def fixits(self):$/;"	m	class:Diagnostic
fixits	clang_complete_old/plugin/clang/cindex.py	/^    def fixits(self):$/;"	m	class:Diagnostic
fl	clang_complete_old/bin/generate_kinds.py	/^  fl = re.compile("CXCursor_(First|Last)[A-Z].*")$/;"	v
flatten	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
foldl	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldr	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
formatResult	clang_complete/plugin/libclang.py	/^def formatResult(result):$/;"	f
formatResult	clang_complete_old/plugin/libclang.py	/^def formatResult(result):$/;"	f
fromDirectory	clang_complete/plugin/clang/cindex.py	/^    def fromDirectory(buildDir):$/;"	m	class:CompilationDatabase
fromDirectory	clang_complete_old/plugin/clang/cindex.py	/^    def fromDirectory(buildDir):$/;"	m	class:CompilationDatabase
from_ast_file	clang_complete/plugin/clang/cindex.py	/^    def from_ast_file(cls, filename, index=None):$/;"	m	class:TranslationUnit
from_ast_file	clang_complete_old/plugin/clang/cindex.py	/^    def from_ast_file(cls, filename, index=None):$/;"	m	class:TranslationUnit
from_cursor_result	clang_complete/plugin/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:Cursor
from_cursor_result	clang_complete/plugin/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:File
from_cursor_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:Cursor
from_cursor_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_cursor_result(res, fn, args):$/;"	m	class:File
from_id	clang_complete/plugin/clang/cindex.py	/^    def from_id(id):$/;"	m	class:CursorKind
from_id	clang_complete/plugin/clang/cindex.py	/^    def from_id(id):$/;"	m	class:TypeKind
from_id	clang_complete_old/plugin/clang/cindex.py	/^    def from_id(id):$/;"	m	class:CursorKind
from_id	clang_complete_old/plugin/clang/cindex.py	/^    def from_id(id):$/;"	m	class:TypeKind
from_location	clang_complete/plugin/clang/cindex.py	/^    def from_location(tu, location):$/;"	m	class:Cursor
from_location	clang_complete_old/plugin/clang/cindex.py	/^    def from_location(tu, location):$/;"	m	class:Cursor
from_locations	clang_complete/plugin/clang/cindex.py	/^    def from_locations(start, end):$/;"	m	class:SourceRange
from_locations	clang_complete_old/plugin/clang/cindex.py	/^    def from_locations(start, end):$/;"	m	class:SourceRange
from_name	clang_complete/plugin/clang/cindex.py	/^    def from_name(translation_unit, file_name):$/;"	m	class:File
from_name	clang_complete_old/plugin/clang/cindex.py	/^    def from_name(translation_unit, file_name):$/;"	m	class:File
from_offset	clang_complete/plugin/clang/cindex.py	/^    def from_offset(tu, file, offset):$/;"	m	class:SourceLocation
from_offset	clang_complete_old/plugin/clang/cindex.py	/^    def from_offset(tu, file, offset):$/;"	m	class:SourceLocation
from_param	clang_complete/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:ClangObject
from_param	clang_complete/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:CodeCompletionResults
from_param	clang_complete/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:CursorKind
from_param	clang_complete/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:Diagnostic
from_param	clang_complete/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:TypeKind
from_param	clang_complete_old/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:ClangObject
from_param	clang_complete_old/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:CodeCompletionResults
from_param	clang_complete_old/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:CursorKind
from_param	clang_complete_old/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:Diagnostic
from_param	clang_complete_old/plugin/clang/cindex.py	/^    def from_param(self):$/;"	m	class:TypeKind
from_position	clang_complete/plugin/clang/cindex.py	/^    def from_position(tu, file, line, column):$/;"	m	class:SourceLocation
from_position	clang_complete_old/plugin/clang/cindex.py	/^    def from_position(tu, file, line, column):$/;"	m	class:SourceLocation
from_result	clang_complete/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompilationDatabase
from_result	clang_complete/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompileCommands
from_result	clang_complete/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Cursor
from_result	clang_complete/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Type
from_result	clang_complete/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:_CXString
from_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompilationDatabase
from_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:CompileCommands
from_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Cursor
from_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:Type
from_result	clang_complete_old/plugin/clang/cindex.py	/^    def from_result(res, fn, args):$/;"	m	class:_CXString
from_source	clang_complete/plugin/clang/cindex.py	/^    def from_source(cls, filename, args=None, unsaved_files=None, options=0,$/;"	m	class:TranslationUnit
from_source	clang_complete_old/plugin/clang/cindex.py	/^    def from_source(cls, filename, args=None, unsaved_files=None, options=0,$/;"	m	class:TranslationUnit
from_value	clang_complete/plugin/clang/cindex.py	/^    def from_value(value):$/;"	m	class:TokenKind
from_value	clang_complete_old/plugin/clang/cindex.py	/^    def from_value(value):$/;"	m	class:TokenKind
functionList	clang_complete/plugin/clang/cindex.py	/^functionList = [$/;"	v
functionList	clang_complete_old/plugin/clang/cindex.py	/^functionList = [$/;"	v
function_exists	clang_complete/plugin/clang/cindex.py	/^    def function_exists(self, name):$/;"	m	class:Config
function_exists	clang_complete_old/plugin/clang/cindex.py	/^    def function_exists(self, name):$/;"	m	class:Config
g:clang_complete_loaded	clang_complete/plugin/clang_complete.vim	/^let g:clang_complete_loaded = 1$/;"	v
g:clang_complete_loaded	clang_complete_old/plugin/clang_complete.vim	/^let g:clang_complete_loaded = 1$/;"	v
g:loaded_neobundle	neobundle.vim/plugin/neobundle.vim	/^let g:loaded_neobundle = 1$/;"	v
g:loaded_neocomplete	neocomplete/plugin/neocomplete.vim	/^let g:loaded_neocomplete = 1$/;"	v
g:loaded_neocomplete_buffer	neocomplete/plugin/neocomplete/buffer.vim	/^let g:loaded_neocomplete_buffer = 1$/;"	v
g:loaded_neocomplete_dictionary	neocomplete/plugin/neocomplete/dictionary.vim	/^let g:loaded_neocomplete_dictionary = 1$/;"	v
g:loaded_neocomplete_member	neocomplete/plugin/neocomplete/member.vim	/^let g:loaded_neocomplete_member = 1$/;"	v
g:loaded_neocomplete_tag	neocomplete/plugin/neocomplete/tag.vim	/^let g:loaded_neocomplete_tag = 1$/;"	v
g:neobundle#enable_name_conversion	neobundle.vim/test/parse.vim	/^let g:neobundle#enable_name_conversion = 0$/;"	v
g:neobundle#hooks	neobundle.vim/autoload/neobundle.vim	/^let g:neobundle#hooks = {}$/;"	v
g:neobundle#tapped	neobundle.vim/autoload/neobundle.vim	/^let g:neobundle#tapped = {}$/;"	v
g:neobundle#types#git#default_protocol	neobundle.vim/test/commands.vim	/^let g:neobundle#types#git#default_protocol = 'https'$/;"	v
g:neobundle#types#git#default_protocol	neobundle.vim/test/parse.vim	/^let g:neobundle#types#git#default_protocol = 'https'$/;"	v
g:neobundle#types#hg#default_protocol	neobundle.vim/test/parse.vim	/^let g:neobundle#types#hg#default_protocol = 'https'$/;"	v
g:neocomplete#auto_complete_delay	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#auto_complete_delay =$/;"	v
g:neocomplete#auto_completion_start_length	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#auto_completion_start_length =$/;"	v
g:neocomplete#delimiter_patterns	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#delimiter_patterns =$/;"	v
g:neocomplete#disable_auto_complete	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#disable_auto_complete =$/;"	v
g:neocomplete#enable_auto_close_preview	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_close_preview =$/;"	v
g:neocomplete#enable_auto_delimiter	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_delimiter =$/;"	v
g:neocomplete#enable_auto_select	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_select =$/;"	v
g:neocomplete#enable_camel_case	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_camel_case =$/;"	v
g:neocomplete#enable_debug	neocomplete/plugin/neocomplete.vim	/^let g:neocomplete#enable_debug =$/;"	v
g:neocomplete#enable_fuzzy_completion	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_fuzzy_completion =$/;"	v
g:neocomplete#enable_ignore_case	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_ignore_case =$/;"	v
g:neocomplete#enable_multibyte_completion	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_multibyte_completion =$/;"	v
g:neocomplete#enable_refresh_always	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_refresh_always =$/;"	v
g:neocomplete#enable_smart_case	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_smart_case =$/;"	v
g:neocomplete#fallback_mappings	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#fallback_mappings =$/;"	v
g:neocomplete#force_omni_input_patterns	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#force_omni_input_patterns =$/;"	v
g:neocomplete#ignore_source_files	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#ignore_source_files =$/;"	v
g:neocomplete#keyword_patterns	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#keyword_patterns =$/;"	v
g:neocomplete#lock_buffer_name_pattern	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#lock_buffer_name_pattern =$/;"	v
g:neocomplete#lock_iminsert	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#lock_iminsert =$/;"	v
g:neocomplete#manual_completion_start_length	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#manual_completion_start_length =$/;"	v
g:neocomplete#max_keyword_width	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#max_keyword_width =$/;"	v
g:neocomplete#max_list	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#max_list =$/;"	v
g:neocomplete#min_keyword_length	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#min_keyword_length =$/;"	v
g:neocomplete#release_cache_time	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#release_cache_time =$/;"	v
g:neocomplete#skip_auto_completion_time	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#skip_auto_completion_time =$/;"	v
g:neocomplete#sources	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#sources =$/;"	v
g:neocomplete#sources#buffer#cache_limit_size	neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#cache_limit_size =$/;"	v
g:neocomplete#sources#buffer#disabled_pattern	neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#disabled_pattern =$/;"	v
g:neocomplete#sources#buffer#max_keyword_width	neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#max_keyword_width =$/;"	v
g:neocomplete#sources#dictionary#dictionaries	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let g:neocomplete#sources#dictionary#dictionaries =$/;"	v
g:neocomplete#sources#member#input_patterns	neocomplete/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#input_patterns =$/;"	v
g:neocomplete#sources#member#prefix_patterns	neocomplete/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#prefix_patterns =$/;"	v
g:neocomplete#sources#omni#functions	neocomplete/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#functions =$/;"	v
g:neocomplete#sources#omni#input_patterns	neocomplete/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#input_patterns =$/;"	v
g:neocomplete#tags_filter_patterns	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#tags_filter_patterns =$/;"	v
g:neocomplete#text_mode_filetypes	neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#text_mode_filetypes =$/;"	v
g:path	neobundle.vim/test/toml.vim	/^let g:path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
g:path	neobundle.vim/test/tsort.vim	/^let g:path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
gather_candidates	clang_complete_old/rplugin/python3/deoplete/sources/clang_complete.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
getAbbr	clang_complete/plugin/libclang.py	/^def getAbbr(strings):$/;"	f
getAbbr	clang_complete_old/plugin/libclang.py	/^def getAbbr(strings):$/;"	f
getAbbrevation	clang_complete/plugin/libclang.py	/^    def getAbbrevation(x):$/;"	f	function:getCurrentCompletions
getBuiltinHeaderPath	clang_complete/plugin/libclang.py	/^def getBuiltinHeaderPath(library_path):$/;"	f
getBuiltinHeaderPath	clang_complete_old/plugin/libclang.py	/^def getBuiltinHeaderPath(library_path):$/;"	f
getCompilationDBParams	clang_complete/plugin/libclang.py	/^def getCompilationDBParams(fileName):$/;"	f
getCompilationDBParams	clang_complete_old/plugin/libclang.py	/^def getCompilationDBParams(fileName):$/;"	f
getCompileCommands	clang_complete/plugin/clang/cindex.py	/^    def getCompileCommands(self, filename):$/;"	m	class:CompilationDatabase
getCompileCommands	clang_complete_old/plugin/clang/cindex.py	/^    def getCompileCommands(self, filename):$/;"	m	class:CompilationDatabase
getCompileParams	clang_complete/plugin/libclang.py	/^def getCompileParams(fileName):$/;"	f
getCompileParams	clang_complete_old/plugin/libclang.py	/^def getCompileParams(fileName):$/;"	f
getCurrentCompletionResults	clang_complete/plugin/libclang.py	/^def getCurrentCompletionResults(line, column, args, currentFile, fileName,$/;"	f
getCurrentCompletionResults	clang_complete_old/plugin/libclang.py	/^def getCurrentCompletionResults(line, column, args, currentFile, fileName,$/;"	f
getCurrentCompletions	clang_complete/plugin/libclang.py	/^def getCurrentCompletions(base):$/;"	f
getCurrentCompletions	clang_complete_old/plugin/libclang.py	/^def getCurrentCompletions(base):$/;"	f
getCurrentFile	clang_complete/plugin/libclang.py	/^def getCurrentFile():$/;"	f
getCurrentFile	clang_complete_old/plugin/libclang.py	/^def getCurrentFile():$/;"	f
getCurrentQuickFixList	clang_complete/plugin/libclang.py	/^def getCurrentQuickFixList():$/;"	f
getCurrentQuickFixList	clang_complete_old/plugin/libclang.py	/^def getCurrentQuickFixList():$/;"	f
getCurrentTranslationUnit	clang_complete/plugin/libclang.py	/^def getCurrentTranslationUnit(args, currentFile, fileName, timer,$/;"	f
getCurrentTranslationUnit	clang_complete_old/plugin/libclang.py	/^def getCurrentTranslationUnit(args, currentFile, fileName, timer,$/;"	f
getPriority	clang_complete/plugin/libclang.py	/^    def getPriority(x):$/;"	f	function:getCurrentCompletions
getQuickFix	clang_complete/plugin/libclang.py	/^def getQuickFix(diagnostic):$/;"	f
getQuickFix	clang_complete_old/plugin/libclang.py	/^def getQuickFix(diagnostic):$/;"	f
getQuickFixList	clang_complete/plugin/libclang.py	/^def getQuickFixList(tu):$/;"	f
getQuickFixList	clang_complete_old/plugin/libclang.py	/^def getQuickFixList(tu):$/;"	f
get_all_kinds	clang_complete/plugin/clang/cindex.py	/^    def get_all_kinds():$/;"	m	class:CursorKind
get_all_kinds	clang_complete_old/plugin/clang/cindex.py	/^    def get_all_kinds():$/;"	m	class:CursorKind
get_arguments	clang_complete/plugin/clang/cindex.py	/^    def get_arguments(self):$/;"	m	class:Cursor
get_arguments	clang_complete_old/plugin/clang/cindex.py	/^    def get_arguments(self):$/;"	m	class:Cursor
get_array_element_type	clang_complete/plugin/clang/cindex.py	/^    def get_array_element_type(self):$/;"	m	class:Type
get_array_element_type	clang_complete_old/plugin/clang/cindex.py	/^    def get_array_element_type(self):$/;"	m	class:Type
get_array_size	clang_complete/plugin/clang/cindex.py	/^    def get_array_size(self):$/;"	m	class:Type
get_array_size	clang_complete_old/plugin/clang/cindex.py	/^    def get_array_size(self):$/;"	m	class:Type
get_candidates	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_candidates(complete_results, complete_pos, complete_str) abort "{{{$/;"	f
get_canonical	clang_complete/plugin/clang/cindex.py	/^    def get_canonical(self):$/;"	m	class:Type
get_canonical	clang_complete_old/plugin/clang/cindex.py	/^    def get_canonical(self):$/;"	m	class:Type
get_children	clang_complete/plugin/clang/cindex.py	/^    def get_children(self):$/;"	m	class:Cursor
get_children	clang_complete_old/plugin/clang/cindex.py	/^    def get_children(self):$/;"	m	class:Cursor
get_cindex_library	clang_complete/plugin/clang/cindex.py	/^    def get_cindex_library(self):$/;"	m	class:Config
get_cindex_library	clang_complete_old/plugin/clang/cindex.py	/^    def get_cindex_library(self):$/;"	m	class:Config
get_commit_date	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:get_commit_date(bundle) abort "{{{$/;"	f
get_commit_status	neobundle.vim/autoload/unite/sources/neobundle.vim	/^function! s:get_commit_status(bundle) abort "{{{$/;"	f
get_complete_pos	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_complete_pos(complete_results) abort "{{{$/;"	f
get_complete_position	clang_complete_old/rplugin/python3/deoplete/sources/clang_complete.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_convert_candidates	neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! s:get_convert_candidates(candidates) abort$/;"	f
get_declaration	clang_complete/plugin/clang/cindex.py	/^    def get_declaration(self):$/;"	m	class:Type
get_declaration	clang_complete_old/plugin/clang/cindex.py	/^    def get_declaration(self):$/;"	m	class:Type
get_definition	clang_complete/plugin/clang/cindex.py	/^    def get_definition(self):$/;"	m	class:Cursor
get_definition	clang_complete_old/plugin/clang/cindex.py	/^    def get_definition(self):$/;"	m	class:Cursor
get_extent	clang_complete/plugin/clang/cindex.py	/^    def get_extent(self, filename, locations):$/;"	m	class:TranslationUnit
get_extent	clang_complete_old/plugin/clang/cindex.py	/^    def get_extent(self, filename, locations):$/;"	m	class:TranslationUnit
get_file	clang_complete/plugin/clang/cindex.py	/^    def get_file(self, filename):$/;"	m	class:TranslationUnit
get_file	clang_complete_old/plugin/clang/cindex.py	/^    def get_file(self, filename):$/;"	m	class:TranslationUnit
get_filename	clang_complete/plugin/clang/cindex.py	/^    def get_filename(self):$/;"	m	class:Config
get_filename	clang_complete_old/plugin/clang/cindex.py	/^    def get_filename(self):$/;"	m	class:Config
get_github_searches	neobundle.vim/autoload/neobundle/sources/github.vim	/^function! s:get_github_searches(string) abort "{{{$/;"	f
get_glob_files	neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:get_glob_files(complete_str, path) abort "{{{$/;"	f
get_includes	clang_complete/plugin/clang/cindex.py	/^    def get_includes(self):$/;"	m	class:TranslationUnit
get_includes	clang_complete_old/plugin/clang/cindex.py	/^    def get_includes(self):$/;"	m	class:TranslationUnit
get_input	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:get_input() abort "{{{$/;"	f
get_last_status	neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:get_last_status() abort$/;"	f
get_lazy_bundles	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:get_lazy_bundles() abort "{{{$/;"	f
get_list	neocomplete/autoload/neocomplete/util.vim	/^function! s:get_list() abort "{{{$/;"	f
get_location	clang_complete/plugin/clang/cindex.py	/^    def get_location(self, filename, position):$/;"	m	class:TranslationUnit
get_location	clang_complete_old/plugin/clang/cindex.py	/^    def get_location(self, filename, position):$/;"	m	class:TranslationUnit
get_member_list	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_member_list(context, cur_text, var_name) abort "{{{$/;"	f
get_member_pattern	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_member_pattern(filetype) abort "{{{$/;"	f
get_neobundle_args	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:get_neobundle_args(candidate) abort$/;"	f
get_omni_funcs	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_funcs(filetype) abort "{{{$/;"	f
get_omni_list	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_list(list) abort "{{{$/;"	f
get_plugin_names	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:get_plugin_names() abort "{{{$/;"	f
get_pointee	clang_complete/plugin/clang/cindex.py	/^    def get_pointee(self):$/;"	m	class:Type
get_pointee	clang_complete_old/plugin/clang/cindex.py	/^    def get_pointee(self):$/;"	m	class:Type
get_prelude	neocomplete/autoload/neocomplete/util.vim	/^function! s:get_prelude() abort "{{{$/;"	f
get_process	neocomplete/autoload/neocomplete/util.vim	/^function! s:get_process() abort "{{{$/;"	f
get_pyfile	clang_complete/plugin/clang_complete.vim	/^function! s:get_pyfile()$/;"	f
get_python	clang_complete/plugin/clang_complete.vim	/^function! s:get_python()$/;"	f
get_repository_plugins	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^function! s:get_repository_plugins(context) abort "{{{$/;"	f
get_repository_plugins	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^function! s:get_repository_plugins(context, path) abort "{{{$/;"	f
get_result	clang_complete/plugin/clang/cindex.py	/^    def get_result(self):$/;"	m	class:Type
get_result	clang_complete_old/plugin/clang/cindex.py	/^    def get_result(self):$/;"	m	class:Type
get_rtp_after	neobundle.vim/autoload/neobundle/config.vim	/^function! s:get_rtp_after(bundle) abort "{{{$/;"	f
get_skipped_message	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:get_skipped_message(number, max, bundle, prefix, message) abort "{{{$/;"	f
get_sources_list	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
get_sources_list	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
get_string	neocomplete/autoload/neocomplete/util.vim	/^function! s:get_string() abort "{{{$/;"	f
get_tokens	clang_complete/plugin/clang/cindex.py	/^    def get_tokens(self):$/;"	m	class:Cursor
get_tokens	clang_complete/plugin/clang/cindex.py	/^    def get_tokens(self, locations=None, extent=None):$/;"	m	class:TranslationUnit
get_tokens	clang_complete/plugin/clang/cindex.py	/^    def get_tokens(tu, extent):$/;"	m	class:TokenGroup
get_tokens	clang_complete_old/plugin/clang/cindex.py	/^    def get_tokens(self):$/;"	m	class:Cursor
get_tokens	clang_complete_old/plugin/clang/cindex.py	/^    def get_tokens(self, locations=None, extent=None):$/;"	m	class:TranslationUnit
get_tokens	clang_complete_old/plugin/clang/cindex.py	/^    def get_tokens(tu, extent):$/;"	m	class:TokenGroup
get_usr	clang_complete/plugin/clang/cindex.py	/^    def get_usr(self):$/;"	m	class:Cursor
get_usr	clang_complete_old/plugin/clang/cindex.py	/^    def get_usr(self):$/;"	m	class:Cursor
get_words	neobundle.vim/autoload/neobundle/util.vim	/^function! s:get_words(filename) abort "{{{$/;"	f
getchar	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
getchar_safe	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
getfilename	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
glob	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
globpath	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:globpath(path, expr) abort$/;"	f
gotoDeclaration	clang_complete/plugin/libclang.py	/^def gotoDeclaration(preview=True):$/;"	f
gotoDeclaration	clang_complete_old/plugin/libclang.py	/^def gotoDeclaration(preview=True):$/;"	f
group_by	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
has	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
has_common_items	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
has_doc	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:has_doc(path) abort "{{{$/;"	f
has_index	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
has_vimproc	neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:has_vimproc() abort$/;"	f
hash	clang_complete/plugin/clang/cindex.py	/^    def hash(self):$/;"	m	class:Cursor
hash	clang_complete_old/plugin/clang/cindex.py	/^    def hash(self):$/;"	m	class:Cursor
hash	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:hash(str) abort$/;"	f
highlightCurrentDiagnostics	clang_complete/plugin/libclang.py	/^def highlightCurrentDiagnostics():$/;"	f
highlightCurrentDiagnostics	clang_complete_old/plugin/libclang.py	/^def highlightCurrentDiagnostics():$/;"	f
highlightDiagnostic	clang_complete/plugin/libclang.py	/^def highlightDiagnostic(diagnostic):$/;"	f
highlightDiagnostic	clang_complete_old/plugin/libclang.py	/^def highlightDiagnostic(diagnostic):$/;"	f
highlightDiagnostics	clang_complete/plugin/libclang.py	/^def highlightDiagnostics(tu):$/;"	f
highlightDiagnostics	clang_complete_old/plugin/libclang.py	/^def highlightDiagnostics(tu):$/;"	f
highlightRange	clang_complete/plugin/libclang.py	/^def highlightRange(range, hlGroup):$/;"	f
highlightRange	clang_complete_old/plugin/libclang.py	/^def highlightRange(range, hlGroup):$/;"	f
iconv	neobundle.vim/autoload/neobundle/util.vim	/^function! s:iconv(expr, from, to) abort "{{{$/;"	f
iconv	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
import	neocomplete/autoload/vital/neocomplete.vim	/^function! s:import(name, ...) abort dict$/;"	f
indent_current_line	neocomplete/autoload/neocomplete/handler.vim	/^function! s:indent_current_line() abort "{{{$/;"	f
index	clang_complete/plugin/libclang.py	/^index = None$/;"	v
index	clang_complete_old/bin/generate_kinds.py	/^index = clang.cindex.Index.create()$/;"	v
init	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:init(context, bundle_names) abort "{{{$/;"	f
initClangComplete	clang_complete/plugin/libclang.py	/^def initClangComplete(clang_complete_flags, clang_compilation_database,$/;"	f
initClangComplete	clang_complete_old/plugin/libclang.py	/^                      library_path):$/;"	f
initClangCompletePython	clang_complete/plugin/clang_complete.vim	/^function! s:initClangCompletePython()$/;"	f
initClangCompletePython	clang_complete_old/plugin/clang_complete.vim	/^function! s:initClangCompletePython()$/;"	f
init_depends	neobundle.vim/autoload/neobundle/init.vim	/^function! s:init_depends(bundle) abort "{{{$/;"	f
init_lazy	neobundle.vim/autoload/neobundle/init.vim	/^function! s:init_lazy(bundle) abort "{{{$/;"	f
initialize_plugin_names	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:initialize_plugin_names(context) abort "{{{$/;"	f
initialize_source	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:initialize_source(srcname) abort "{{{$/;"	f
initialize_source	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:initialize_source(srcname, filetype) abort "{{{$/;"	f
initialize_tags	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:initialize_tags(filename) abort "{{{$/;"	f
input_helper	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
input_safe	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
install	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:install(bang, bundles) abort "{{{$/;"	f
intersect	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
isKindInformative	clang_complete/plugin/clang/cindex.py	/^    def isKindInformative(self):$/;"	m	class:CompletionChunk
isKindInformative	clang_complete_old/plugin/clang/cindex.py	/^    def isKindInformative(self):$/;"	m	class:CompletionChunk
isKindOptional	clang_complete/plugin/clang/cindex.py	/^    def isKindOptional(self):$/;"	m	class:CompletionChunk
isKindOptional	clang_complete_old/plugin/clang/cindex.py	/^    def isKindOptional(self):$/;"	m	class:CompletionChunk
isKindPlaceHolder	clang_complete/plugin/clang/cindex.py	/^    def isKindPlaceHolder(self):$/;"	m	class:CompletionChunk
isKindPlaceHolder	clang_complete_old/plugin/clang/cindex.py	/^    def isKindPlaceHolder(self):$/;"	m	class:CompletionChunk
isKindResultType	clang_complete/plugin/clang/cindex.py	/^    def isKindResultType(self):$/;"	m	class:CompletionChunk
isKindResultType	clang_complete_old/plugin/clang/cindex.py	/^    def isKindResultType(self):$/;"	m	class:CompletionChunk
isKindTypedText	clang_complete/plugin/clang/cindex.py	/^    def isKindTypedText(self):$/;"	m	class:CompletionChunk
isKindTypedText	clang_complete_old/plugin/clang/cindex.py	/^    def isKindTypedText(self):$/;"	m	class:CompletionChunk
isWindows	clang_complete/plugin/clang_complete.vim	/^function! s:isWindows()$/;"	f
isWindows	clang_complete_old/plugin/clang_complete.vim	/^function! s:isWindows()$/;"	f
is_absolute	neobundle.vim/autoload/neobundle/util.vim	/^  function! s:is_absolute(path) abort "{{{$/;"	f
is_attribute	clang_complete/plugin/clang/cindex.py	/^    def is_attribute(self):$/;"	m	class:CursorKind
is_attribute	clang_complete_old/plugin/clang/cindex.py	/^    def is_attribute(self):$/;"	m	class:CursorKind
is_const_qualified	clang_complete/plugin/clang/cindex.py	/^    def is_const_qualified(self):$/;"	m	class:Type
is_const_qualified	clang_complete_old/plugin/clang/cindex.py	/^    def is_const_qualified(self):$/;"	m	class:Type
is_cygwin	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
is_declaration	clang_complete/plugin/clang/cindex.py	/^    def is_declaration(self):$/;"	m	class:CursorKind
is_declaration	clang_complete_old/plugin/clang/cindex.py	/^    def is_declaration(self):$/;"	m	class:CursorKind
is_definition	clang_complete/plugin/clang/cindex.py	/^    def is_definition(self):$/;"	m	class:Cursor
is_definition	clang_complete_old/plugin/clang/cindex.py	/^    def is_definition(self):$/;"	m	class:Cursor
is_delimiter	neocomplete/autoload/neocomplete/handler.vim	/^function! s:is_delimiter() abort "{{{$/;"	f
is_dict	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
is_expression	clang_complete/plugin/clang/cindex.py	/^    def is_expression(self):$/;"	m	class:CursorKind
is_expression	clang_complete_old/plugin/clang/cindex.py	/^    def is_expression(self):$/;"	m	class:CursorKind
is_float	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
is_funcref	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
is_function_variadic	clang_complete/plugin/clang/cindex.py	/^    def is_function_variadic(self):$/;"	m	class:Type
is_function_variadic	clang_complete_old/plugin/clang/cindex.py	/^    def is_function_variadic(self):$/;"	m	class:Type
is_git_dir	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:is_git_dir(path) abort "{{{$/;"	f
is_input_file	clang_complete/plugin/clang/cindex.py	/^    def is_input_file(self):$/;"	m	class:FileInclusion
is_input_file	clang_complete_old/plugin/clang/cindex.py	/^    def is_input_file(self):$/;"	m	class:FileInclusion
is_invalid	clang_complete/plugin/clang/cindex.py	/^    def is_invalid(self):$/;"	m	class:CursorKind
is_invalid	clang_complete_old/plugin/clang/cindex.py	/^    def is_invalid(self):$/;"	m	class:CursorKind
is_list	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
is_mac	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_mac() abort$/;"	f
is_number	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
is_numeric	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
is_pod	clang_complete/plugin/clang/cindex.py	/^    def is_pod(self):$/;"	m	class:Type
is_pod	clang_complete_old/plugin/clang/cindex.py	/^    def is_pod(self):$/;"	m	class:Type
is_preprocessing	clang_complete/plugin/clang/cindex.py	/^    def is_preprocessing(self):$/;"	m	class:CursorKind
is_preprocessing	clang_complete_old/plugin/clang/cindex.py	/^    def is_preprocessing(self):$/;"	m	class:CursorKind
is_reference	clang_complete/plugin/clang/cindex.py	/^    def is_reference(self):$/;"	m	class:CursorKind
is_reference	clang_complete_old/plugin/clang/cindex.py	/^    def is_reference(self):$/;"	m	class:CursorKind
is_reset_ftplugin	neobundle.vim/autoload/neobundle/config.vim	/^function! s:is_reset_ftplugin(filetype, rtp) abort "{{{$/;"	f
is_restrict_qualified	clang_complete/plugin/clang/cindex.py	/^    def is_restrict_qualified(self):$/;"	m	class:Type
is_restrict_qualified	clang_complete_old/plugin/clang/cindex.py	/^    def is_restrict_qualified(self):$/;"	m	class:Type
is_skip_auto_complete	neocomplete/autoload/neocomplete/handler.vim	/^function! s:is_skip_auto_complete(cur_text) abort "{{{$/;"	f
is_statement	clang_complete/plugin/clang/cindex.py	/^    def is_statement(self):$/;"	m	class:CursorKind
is_statement	clang_complete_old/plugin/clang/cindex.py	/^    def is_statement(self):$/;"	m	class:CursorKind
is_static_method	clang_complete/plugin/clang/cindex.py	/^    def is_static_method(self):$/;"	m	class:Cursor
is_static_method	clang_complete_old/plugin/clang/cindex.py	/^    def is_static_method(self):$/;"	m	class:Cursor
is_string	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
is_translation_unit	clang_complete/plugin/clang/cindex.py	/^    def is_translation_unit(self):$/;"	m	class:CursorKind
is_translation_unit	clang_complete_old/plugin/clang/cindex.py	/^    def is_translation_unit(self):$/;"	m	class:CursorKind
is_unexposed	clang_complete/plugin/clang/cindex.py	/^    def is_unexposed(self):$/;"	m	class:CursorKind
is_unexposed	clang_complete_old/plugin/clang/cindex.py	/^    def is_unexposed(self):$/;"	m	class:CursorKind
is_unix	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_unix() abort$/;"	f
is_volatile_qualified	clang_complete/plugin/clang/cindex.py	/^    def is_volatile_qualified(self):$/;"	m	class:Type
is_volatile_qualified	clang_complete_old/plugin/clang/cindex.py	/^    def is_volatile_qualified(self):$/;"	m	class:Type
is_windows	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_windows() abort$/;"	f
job_handler	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:job_handler(job_id, data, event) abort "{{{$/;"	f
join_posix_lines	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
jumpToLocation	clang_complete/plugin/libclang.py	/^def jumpToLocation(filename, line, column, preview):$/;"	f
jumpToLocation	clang_complete_old/plugin/libclang.py	/^def jumpToLocation(filename, line, column, preview):$/;"	f
justify_equal_spacing	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
kind	clang_complete/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:CodeCompletionResult
kind	clang_complete/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:CompletionChunk
kind	clang_complete/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Cursor
kind	clang_complete/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Token
kind	clang_complete/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Type
kind	clang_complete_old/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:CodeCompletionResult
kind	clang_complete_old/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:CompletionChunk
kind	clang_complete_old/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Cursor
kind	clang_complete_old/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Token
kind	clang_complete_old/plugin/clang/cindex.py	/^    def kind(self):$/;"	m	class:Type
kind.action_table.delete.func	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^function! s:kind.action_table.delete.func(candidates) abort "{{{$/;"	f
kind.action_table.preview.func	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.reinstall.func	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^function! s:kind.action_table.reinstall.func(candidates) abort "{{{$/;"	f
kind.action_table.update.func	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^function! s:kind.action_table.update.func(candidates) abort "{{{$/;"	f
kinds	clang_complete/plugin/libclang.py	/^kinds = dict({$/;"	v
kinds	clang_complete_old/bin/generate_kinds.py	/^    kinds = child$/;"	v
kinds	clang_complete_old/bin/generate_kinds.py	/^kinds = None$/;"	v
kinds	clang_complete_old/plugin/kinds.py	/^kinds = {$/;"	v
kinds_py_path	clang_complete_old/bin/generate_kinds.py	/^kinds_py_path = os.path.join($/;"	v
levenshtein_distance	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
lexical_parent	clang_complete/plugin/clang/cindex.py	/^    def lexical_parent(self):$/;"	m	class:Cursor
lexical_parent	clang_complete_old/plugin/clang/cindex.py	/^    def lexical_parent(self):$/;"	m	class:Cursor
lib	clang_complete/plugin/clang/cindex.py	/^    def lib(self):$/;"	m	class:Config
lib	clang_complete_old/plugin/clang/cindex.py	/^    def lib(self):$/;"	m	class:Config
libclangLock	clang_complete/plugin/libclang.py	/^libclangLock = None$/;"	v
library_file	clang_complete/plugin/clang/cindex.py	/^    library_file = None$/;"	v	class:Config
library_file	clang_complete_old/plugin/clang/cindex.py	/^    library_file = None$/;"	v	class:Config
library_path	clang_complete/plugin/clang/cindex.py	/^    library_path = None$/;"	v	class:Config
library_path	clang_complete_old/plugin/clang/cindex.py	/^    library_path = None$/;"	v	class:Config
line	clang_complete/plugin/clang/cindex.py	/^    def line(self):$/;"	m	class:SourceLocation
line	clang_complete_old/plugin/clang/cindex.py	/^    def line(self):$/;"	m	class:SourceLocation
lines	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:lines(str) abort$/;"	f
load	neobundle.vim/autoload/neobundle/metadata.vim	/^function! s:load() abort "{{{$/;"	f
load	neocomplete/autoload/vital/neocomplete.vim	/^function! s:load(...) abort dict$/;"	f
load_from_file	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:load_from_file(filename, pattern_file_name, mark, minlen, fileencoding, is_string) abort "{{{$/;"	f
load_from_tags	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:load_from_tags(filename, pattern_file_name, mark, minlen, fileencoding) abort "{{{$/;"	f
loaded	clang_complete/plugin/clang/cindex.py	/^    loaded = False$/;"	v	class:Config
loaded	clang_complete_old/plugin/clang/cindex.py	/^    loaded = False$/;"	v	class:Config
location	clang_complete/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Cursor
location	clang_complete/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Diagnostic
location	clang_complete/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Token
location	clang_complete_old/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Cursor
location	clang_complete_old/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Diagnostic
location	clang_complete_old/plugin/clang/cindex.py	/^    def location(self):$/;"	m	class:Token
main	clang_complete/examples/boost.cpp	/^int main()$/;"	f
main	clang_complete_old/examples/boost.cpp	/^int main()$/;"	f
main	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:main(argv) abort "{{{$/;"	f
make_cache	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:make_cache(filetype) abort "{{{$/;"	f
make_cache_buffer	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_buffer(srcname) abort "{{{$/;"	f
make_cache_current_buffer	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
make_cache_current_buffer	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
make_cache_current_line	neocomplete/autoload/neocomplete/handler.vim	/^function! s:make_cache_current_line() abort "{{{$/;"	f
make_cache_file	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_file(srcname) abort "{{{$/;"	f
make_cache_lines	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_lines(srcname, filetype, lines) abort "{{{$/;"	f
map	neobundle.vim/test/tsort.vim	/^function! s:map(list) abort$/;"	f
map_accum	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
mapping	clang_complete_old/bin/generate_kinds.py	/^mapping = {$/;"	v
matcher.filter	neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
matcher.filter	neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
matcher.filter	neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
matcher.filter	neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
max_by	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
mergeLists	clang_complete/bin/cc_args.py	/^def mergeLists(base, new):$/;"	f
mergeLists	clang_complete_old/bin/cc_args.py	/^def mergeLists(base, new):$/;"	f
min_by	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
name	clang_complete/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:CursorKind
name	clang_complete/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:File
name	clang_complete/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:TypeKind
name	clang_complete_old/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:CursorKind
name	clang_complete_old/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:File
name	clang_complete_old/plugin/clang/cindex.py	/^    def name(self):$/;"	m	class:TypeKind
neobundle#TOML#parse	neobundle.vim/autoload/neobundle/TOML.vim	/^function! neobundle#TOML#parse(text) abort$/;"	f
neobundle#TOML#parse_file	neobundle.vim/autoload/neobundle/TOML.vim	/^function! neobundle#TOML#parse_file(filename) abort$/;"	f
neobundle#_get_installed_bundles	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#_get_installed_bundles(bundle_names) abort "{{{$/;"	f
neobundle#add	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#add(repository, ...) abort "{{{$/;"	f
neobundle#add_meta	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#add_meta(name, ...) abort "{{{$/;"	f
neobundle#append	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#append() abort "{{{$/;"	f
neobundle#autoload#_command	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#_command(command, name, args, bang, line1, line2) abort "{{{$/;"	f
neobundle#autoload#_command_dummy_complete	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#_command_dummy_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neobundle#autoload#_mapping	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#_mapping(mapping, name, mode) abort "{{{$/;"	f
neobundle#autoload#_set_function_prefixes	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#_set_function_prefixes(bundles) abort "{{{$/;"	f
neobundle#autoload#_source	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#_source(bundle_name) abort "{{{$/;"	f
neobundle#autoload#init	neobundle.vim/autoload/neobundle/autoload.vim	/^function! neobundle#autoload#init() abort "{{{$/;"	f
neobundle#begin	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#begin(...) abort "{{{$/;"	f
neobundle#bundle	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#bundle(arg, ...) abort "{{{$/;"	f
neobundle#cache#check_old_cache	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#check_old_cache(cache_dir, filename) abort$/;"	f
neobundle#cache#deletefile	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#deletefile(cache_dir, filename) abort$/;"	f
neobundle#cache#filereadable	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#filereadable(cache_dir, filename) abort$/;"	f
neobundle#cache#getfilename	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#getfilename(cache_dir, filename) abort$/;"	f
neobundle#cache#readfile	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#readfile(cache_dir, filename) abort$/;"	f
neobundle#cache#writefile	neobundle.vim/autoload/neobundle/cache.vim	/^function! neobundle#cache#writefile(cache_dir, filename, list) abort$/;"	f
neobundle#call_hook	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#call_hook(hook_name, ...) abort "{{{$/;"	f
neobundle#commands#check	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#check() abort "{{{$/;"	f
neobundle#commands#check_update	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#check_update(bundle_names) abort "{{{$/;"	f
neobundle#commands#clean	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#clean(bang, ...) abort "{{{$/;"	f
neobundle#commands#clear_cache	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#clear_cache() abort "{{{$/;"	f
neobundle#commands#complete_bundles	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#complete_bundles(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neobundle#commands#complete_deleted_bundles	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#complete_deleted_bundles(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neobundle#commands#complete_lazy_bundles	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#complete_lazy_bundles(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neobundle#commands#gc	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#gc(bundle_names) abort "{{{$/;"	f
neobundle#commands#get_cache_file	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#get_cache_file() abort "{{{$/;"	f
neobundle#commands#get_default_cache_file	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#get_default_cache_file() abort "{{{$/;"	f
neobundle#commands#helptags	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#helptags(bundles) abort "{{{$/;"	f
neobundle#commands#install	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#install(bang, bundle_names) abort "{{{$/;"	f
neobundle#commands#list	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#list() abort "{{{$/;"	f
neobundle#commands#load_cache	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#load_cache(vimrcs) abort "{{{$/;"	f
neobundle#commands#lock	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#lock(name, rev) abort "{{{$/;"	f
neobundle#commands#reinstall	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#reinstall(bundle_names) abort "{{{$/;"	f
neobundle#commands#remote_plugins	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#remote_plugins() abort "{{{$/;"	f
neobundle#commands#rollback	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#rollback(bundle_name) abort "{{{$/;"	f
neobundle#commands#save_cache	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#save_cache() abort "{{{$/;"	f
neobundle#commands#source	neobundle.vim/autoload/neobundle/commands.vim	/^function! neobundle#commands#source(names, ...) abort "{{{$/;"	f
neobundle#config	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#config(arg, ...) abort "{{{$/;"	f
neobundle#config#add	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#add(bundle) abort "{{{$/;"	f
neobundle#config#append	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#append() abort "{{{$/;"	f
neobundle#config#check_commands	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#check_commands(commands) abort "{{{$/;"	f
neobundle#config#check_not_exists	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#check_not_exists(names, ...) abort "{{{$/;"	f
neobundle#config#disable	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#disable(...) abort "{{{$/;"	f
neobundle#config#final	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#final() abort "{{{$/;"	f
neobundle#config#fuzzy_search	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#fuzzy_search(bundle_names) abort "{{{$/;"	f
neobundle#config#get	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get(name) abort "{{{$/;"	f
neobundle#config#get_autoload_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get_autoload_bundles() abort "{{{$/;"	f
neobundle#config#get_enabled_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get_enabled_bundles() abort "{{{$/;"	f
neobundle#config#get_lazy_rtp_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get_lazy_rtp_bundles() abort "{{{$/;"	f
neobundle#config#get_neobundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get_neobundles() abort "{{{$/;"	f
neobundle#config#get_types	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#get_types(...) abort "{{{$/;"	f
neobundle#config#init	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#init() abort "{{{$/;"	f
neobundle#config#is_disabled	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#is_disabled(name) abort "{{{$/;"	f
neobundle#config#is_installed	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#is_installed(name) abort "{{{$/;"	f
neobundle#config#is_sourced	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#is_sourced(name) abort "{{{$/;"	f
neobundle#config#load_extra_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#load_extra_bundles() abort "{{{$/;"	f
neobundle#config#rm	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#rm(bundle) abort "{{{$/;"	f
neobundle#config#rmdir	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#rmdir(path) abort "{{{$/;"	f
neobundle#config#rtp_add	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#rtp_add(bundle) abort "{{{$/;"	f
neobundle#config#rtp_rm	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#rtp_rm(bundle) abort "{{{$/;"	f
neobundle#config#rtp_rm_all_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#rtp_rm_all_bundles() abort "{{{$/;"	f
neobundle#config#save_direct	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#save_direct(arg) abort "{{{$/;"	f
neobundle#config#search	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#search(bundle_names, ...) abort "{{{$/;"	f
neobundle#config#search_simple	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#search_simple(bundle_names) abort "{{{$/;"	f
neobundle#config#set	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#set(name, dict) abort "{{{$/;"	f
neobundle#config#source	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#source(names, ...) abort "{{{$/;"	f
neobundle#config#source_bundles	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#source_bundles(bundles) abort "{{{$/;"	f
neobundle#config#tsort	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#tsort(bundles) abort "{{{$/;"	f
neobundle#config#within_block	neobundle.vim/autoload/neobundle/config.vim	/^function! neobundle#config#within_block() abort "{{{$/;"	f
neobundle#end	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#end() abort "{{{$/;"	f
neobundle#exists_not_installed_bundles	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#exists_not_installed_bundles() abort "{{{$/;"	f
neobundle#get	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get(name) abort "{{{$/;"	f
neobundle#get_cache_version	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_cache_version() abort "{{{$/;"	f
neobundle#get_force_not_installed_bundles	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_force_not_installed_bundles(bundle_names) abort "{{{$/;"	f
neobundle#get_hooks	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_hooks(name) abort "{{{$/;"	f
neobundle#get_neobundle_dir	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_neobundle_dir() abort "{{{$/;"	f
neobundle#get_not_installed_bundle_names	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_not_installed_bundle_names() abort "{{{$/;"	f
neobundle#get_not_installed_bundles	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_not_installed_bundles(bundle_names) abort "{{{$/;"	f
neobundle#get_rtp_dir	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_rtp_dir() abort "{{{$/;"	f
neobundle#get_runtime_dir	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_runtime_dir() abort "{{{$/;"	f
neobundle#get_tags_dir	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#get_tags_dir() abort "{{{$/;"	f
neobundle#has_cache	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#has_cache() abort "{{{$/;"	f
neobundle#init#_bundle	neobundle.vim/autoload/neobundle/init.vim	/^function! neobundle#init#_bundle(bundle) abort "{{{$/;"	f
neobundle#init#_rc	neobundle.vim/autoload/neobundle/init.vim	/^function! neobundle#init#_rc(path) abort "{{{$/;"	f
neobundle#installer#_load_install_info	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#_load_install_info(bundles) abort "{{{$/;"	f
neobundle#installer#build	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#build(bundle) abort "{{{$/;"	f
neobundle#installer#check_output	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#check_output(context, process, is_unite) abort "{{{$/;"	f
neobundle#installer#clear_log	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#clear_log() abort "{{{$/;"	f
neobundle#installer#echomsg	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#echomsg(msg) abort "{{{$/;"	f
neobundle#installer#error	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#error(msg) abort "{{{$/;"	f
neobundle#installer#get_errored_bundles_message	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_errored_bundles_message(bundles) abort "{{{$/;"	f
neobundle#installer#get_log	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_log() abort "{{{$/;"	f
neobundle#installer#get_progress_message	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_progress_message(bundle, number, max) abort "{{{$/;"	f
neobundle#installer#get_reinstall_bundles	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_reinstall_bundles(bundles) abort "{{{$/;"	f
neobundle#installer#get_release_revision	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_release_revision(bundle, command) abort "{{{$/;"	f
neobundle#installer#get_revision_lock_command	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_revision_lock_command(bang, bundle, number, max) abort "{{{$/;"	f
neobundle#installer#get_revision_number	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_revision_number(bundle) abort "{{{$/;"	f
neobundle#installer#get_sync_command	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_sync_command(bang, bundle, number, max) abort "{{{$/;"	f
neobundle#installer#get_tags_info	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_tags_info() abort "{{{$/;"	f
neobundle#installer#get_updated_bundles_message	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_updated_bundles_message(bundles) abort "{{{$/;"	f
neobundle#installer#get_updated_log_message	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_updated_log_message(bundle, new_rev, old_rev) abort "{{{$/;"	f
neobundle#installer#get_updates_log	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#get_updates_log() abort "{{{$/;"	f
neobundle#installer#lock_revision	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#lock_revision(process, context, is_unite) abort "{{{$/;"	f
neobundle#installer#log	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#log(msg, ...) abort "{{{$/;"	f
neobundle#installer#reinstall	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#reinstall(bundles) abort "{{{$/;"	f
neobundle#installer#sync	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#sync(bundle, context, is_unite) abort "{{{$/;"	f
neobundle#installer#update	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#update(bundles) abort "{{{$/;"	f
neobundle#installer#update_log	neobundle.vim/autoload/neobundle/installer.vim	/^function! neobundle#installer#update_log(msg, ...) abort "{{{$/;"	f
neobundle#is_installed	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#is_installed(...) abort "{{{$/;"	f
neobundle#is_sourced	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#is_sourced(name) abort "{{{$/;"	f
neobundle#load_cache	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#load_cache(...) abort "{{{$/;"	f
neobundle#load_toml	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#load_toml(filename, ...) abort "{{{$/;"	f
neobundle#local	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#local(localdir, ...) abort "{{{$/;"	f
neobundle#metadata#get	neobundle.vim/autoload/neobundle/metadata.vim	/^function! neobundle#metadata#get(...) abort "{{{$/;"	f
neobundle#metadata#update	neobundle.vim/autoload/neobundle/metadata.vim	/^function! neobundle#metadata#update() abort "{{{$/;"	f
neobundle#parser#_init_bundle	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#_init_bundle(name, opts) abort "{{{$/;"	f
neobundle#parser#bundle	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#bundle(arg, ...) abort "{{{$/;"	f
neobundle#parser#direct	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#direct(arg) abort "{{{$/;"	f
neobundle#parser#fetch	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#fetch(arg) abort "{{{$/;"	f
neobundle#parser#lazy	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#lazy(arg) abort "{{{$/;"	f
neobundle#parser#load_toml	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#load_toml(filename, default) abort "{{{$/;"	f
neobundle#parser#local	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#local(localdir, options, includes) abort "{{{$/;"	f
neobundle#parser#path	neobundle.vim/autoload/neobundle/parser.vim	/^function! neobundle#parser#path(path, ...) abort "{{{$/;"	f
neobundle#rc	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#rc(...) abort "{{{$/;"	f
neobundle#set_neobundle_dir	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#set_neobundle_dir(path) abort "{{{$/;"	f
neobundle#source	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#source(bundle_names) abort "{{{$/;"	f
neobundle#sources#github#define	neobundle.vim/autoload/neobundle/sources/github.vim	/^function! neobundle#sources#github#define() abort "{{{$/;"	f
neobundle#sources#metadata#define	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^function! neobundle#sources#metadata#define() abort "{{{$/;"	f
neobundle#sources#vim_scripts_org#define	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^function! neobundle#sources#vim_scripts_org#define() abort "{{{$/;"	f
neobundle#tap	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#tap(name) abort "{{{$/;"	f
neobundle#tapped	neobundle.vim/autoload/neobundle/config.vim	/^  let neobundle#tapped = {}$/;"	v
neobundle#types#git#default_protocol	neobundle.vim/test/sample.vim	/^let neobundle#types#git#default_protocol = 'git'$/;"	v
neobundle#types#git#default_protocol	neobundle.vim/test/source.vim	/^let neobundle#types#git#default_protocol = 'https'$/;"	v
neobundle#types#git#define	neobundle.vim/autoload/neobundle/types/git.vim	/^function! neobundle#types#git#define() abort "{{{$/;"	f
neobundle#types#hg#define	neobundle.vim/autoload/neobundle/types/hg.vim	/^function! neobundle#types#hg#define() abort "{{{$/;"	f
neobundle#types#none#define	neobundle.vim/autoload/neobundle/types/none.vim	/^function! neobundle#types#none#define() abort "{{{$/;"	f
neobundle#types#raw#define	neobundle.vim/autoload/neobundle/types/raw.vim	/^function! neobundle#types#raw#define() abort "{{{$/;"	f
neobundle#types#svn#define	neobundle.vim/autoload/neobundle/types/svn.vim	/^function! neobundle#types#svn#define() abort "{{{$/;"	f
neobundle#types#vba#define	neobundle.vim/autoload/neobundle/types/vba.vim	/^function! neobundle#types#vba#define() abort "{{{$/;"	f
neobundle#untap	neobundle.vim/autoload/neobundle.vim	/^function! neobundle#untap() abort "{{{$/;"	f
neobundle#util#cd	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#cd(path) abort "{{{$/;"	f
neobundle#util#cleandir	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#cleandir(path) abort "{{{$/;"	f
neobundle#util#convert2list	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#convert2list(expr) abort "{{{$/;"	f
neobundle#util#copy_bundle_files	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#copy_bundle_files(bundles, directory) abort "{{{$/;"	f
neobundle#util#expand	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#expand(path) abort "{{{$/;"	f
neobundle#util#get_filetypes	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#get_filetypes() abort "{{{$/;"	f
neobundle#util#get_last_status	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#get_last_status() abort "{{{$/;"	f
neobundle#util#has_vimproc	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#has_vimproc() abort "{{{$/;"	f
neobundle#util#is_cygwin	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#is_cygwin() abort "{{{$/;"	f
neobundle#util#is_mac	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#is_mac() abort "{{{$/;"	f
neobundle#util#is_sudo	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#is_sudo() abort "{{{$/;"	f
neobundle#util#is_windows	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#is_windows() abort "{{{$/;"	f
neobundle#util#join_envpath	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#join_envpath(list, orig_path, add_path) abort "{{{$/;"	f
neobundle#util#join_paths	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#join_paths(path1, path2) abort "{{{$/;"	f
neobundle#util#join_rtp	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#join_rtp(list, runtimepath, rtp) abort "{{{$/;"	f
neobundle#util#json2vim	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#json2vim(expr) abort "{{{$/;"	f
neobundle#util#merge_bundle_files	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#merge_bundle_files(bundles, directory) abort "{{{$/;"	f
neobundle#util#name_conversion	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#name_conversion(path) abort "{{{$/;"	f
neobundle#util#print_bundles	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#print_bundles(bundles) abort "{{{$/;"	f
neobundle#util#print_error	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#print_error(expr) abort "{{{$/;"	f
neobundle#util#redir	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#redir(cmd) abort "{{{$/;"	f
neobundle#util#redraw_echo	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#redraw_echo(expr) abort "{{{$/;"	f
neobundle#util#redraw_echomsg	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#redraw_echomsg(expr) abort "{{{$/;"	f
neobundle#util#rmdir	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#rmdir(path) abort "{{{$/;"	f
neobundle#util#set_default	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#set_default(var, val, ...) abort  "{{{$/;"	f
neobundle#util#set_dictionary_helper	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#set_dictionary_helper(variable, keys, pattern) abort "{{{$/;"	f
neobundle#util#sort_by	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#sort_by(list, expr) abort "{{{$/;"	f
neobundle#util#sort_human	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#sort_human(filenames) abort "{{{$/;"	f
neobundle#util#split_envpath	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#split_envpath(path) abort "{{{$/;"	f
neobundle#util#split_rtp	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#split_rtp(runtimepath) abort "{{{$/;"	f
neobundle#util#substitute_path_separator	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#substitute_path_separator(path) abort "{{{$/;"	f
neobundle#util#system	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#system(str, ...) abort "{{{$/;"	f
neobundle#util#truncate_skipping	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#truncate_skipping(str, max, footer_width, separator) abort "{{{$/;"	f
neobundle#util#unify_path	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#unify_path(path) abort "{{{$/;"	f
neobundle#util#uniq	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#uniq(list, ...) abort "{{{$/;"	f
neobundle#util#vim2json	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#vim2json(expr) abort "{{{$/;"	f
neobundle#util#wget	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#wget(uri, outpath) abort "{{{$/;"	f
neobundle#util#writefile	neobundle.vim/autoload/neobundle/util.vim	/^function! neobundle#util#writefile(path, list) abort "{{{$/;"	f
neocomplete	neocomplete/plugin/neocomplete.vim	/^  augroup neocomplete$/;"	a
neocomplete#async_cache#main	neocomplete/autoload/neocomplete/async_cache.vim	/^  function! neocomplete#async_cache#main(argv) abort "{{{$/;"	f
neocomplete#available_sources	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#available_sources() abort "{{{$/;"	f
neocomplete#cache#async_load_from_file	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_file(cache_dir, filename, pattern, mark) abort "{{{$/;"	f
neocomplete#cache#async_load_from_tags	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_tags(cache_dir, filename, filetype, pattern, mark) abort "{{{$/;"	f
neocomplete#cache#check_cache	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_cache(cache_dir, key, async_cache_dictionary, keyword_cache, is_string) abort "{{{$/;"	f
neocomplete#cache#check_old_cache	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_old_cache(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#encode_name	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#encode_name(cache_dir, filename) abort$/;"	f
neocomplete#cache#filereadable	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#filereadable(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#get_cache_list	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#get_cache_list(cache_dir, async_cache_list) abort "{{{$/;"	f
neocomplete#cache#getfilename	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#getfilename(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#load_from_cache	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#load_from_cache(cache_dir, filename, ...) abort "{{{$/;"	f
neocomplete#cache#make_directory	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#make_directory(directory) abort "{{{$/;"	f
neocomplete#cache#readfile	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#readfile(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#save_cache	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#save_cache(cache_dir, filename, keyword_list) abort "{{{$/;"	f
neocomplete#cache#writefile	neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#writefile(cache_dir, filename, list) abort "{{{$/;"	f
neocomplete#cancel_popup	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#cancel_popup() abort$/;"	f
neocomplete#close_popup	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#close_popup() abort$/;"	f
neocomplete#commands#_clean	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_clean() abort "{{{$/;"	f
neocomplete#commands#_initialize	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_initialize() abort "{{{$/;"	f
neocomplete#commands#_lock	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_lock() abort "{{{$/;"	f
neocomplete#commands#_set_file_type	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_set_file_type(filetype) abort "{{{$/;"	f
neocomplete#commands#_toggle_lock	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_toggle_lock() abort "{{{$/;"	f
neocomplete#commands#_unlock	neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_unlock() abort "{{{$/;"	f
neocomplete#complete#_check_previous_position	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_check_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
neocomplete#complete#_get_complete_pos	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_complete_pos(sources) abort "{{{$/;"	f
neocomplete#complete#_get_results	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_results(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_get_words	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_words(sources, complete_pos, complete_str) abort "{{{$/;"	f
neocomplete#complete#_set_previous_position	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
neocomplete#complete#_set_results_pos	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_pos(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_set_results_words	neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_words(sources) abort "{{{$/;"	f
neocomplete#complete_check	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#complete_check() abort "{{{$/;"	f
neocomplete#complete_common_string	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#complete_common_string() abort$/;"	f
neocomplete#context_filetype#filetypes	neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#filetypes() abort "{{{$/;"	f
neocomplete#context_filetype#get	neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#get(filetype) abort "{{{$/;"	f
neocomplete#context_filetype#set	neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#set() abort "{{{$/;"	f
neocomplete#custom#get	neocomplete/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#get() abort "{{{$/;"	f
neocomplete#custom#source	neocomplete/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#source(source_name, option_name, value) abort "{{{$/;"	f
neocomplete#custom_source	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#custom_source(source_name, option_name, value) abort "{{{$/;"	f
neocomplete#define_filter	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#define_filter(filter) abort "{{{$/;"	f
neocomplete#define_source	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#define_source(source) abort "{{{$/;"	f
neocomplete#disable_default_dictionary	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#dup_filter	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#dup_filter(list) abort "{{{$/;"	f
neocomplete#escape_match	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#escape_match(str) abort "{{{$/;"	f
neocomplete#exists_echodoc	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#exists_echodoc() abort "{{{$/;"	f
neocomplete#filetype_complete	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#filters#converter_abbr#define	neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^function! neocomplete#filters#converter_abbr#define() abort "{{{$/;"	f
neocomplete#filters#converter_add_paren#define	neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^function! neocomplete#filters#converter_add_paren#define() abort "{{{$/;"	f
neocomplete#filters#converter_case#define	neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! neocomplete#filters#converter_case#define() abort "{{{$/;"	f
neocomplete#filters#converter_delimiter#define	neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! neocomplete#filters#converter_delimiter#define() abort "{{{$/;"	f
neocomplete#filters#converter_disable_abbr#define	neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! neocomplete#filters#converter_disable_abbr#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_last_paren#define	neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! neocomplete#filters#converter_remove_last_paren#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_overlap#define	neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_overlap#length	neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#length(left, right) abort "{{{$/;"	f
neocomplete#filters#escape	neocomplete/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#escape(string) abort "{{{$/;"	f
neocomplete#filters#fuzzy_escape	neocomplete/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#fuzzy_escape(string) abort "{{{$/;"	f
neocomplete#filters#matcher_fuzzy#define	neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! neocomplete#filters#matcher_fuzzy#define() abort "{{{$/;"	f
neocomplete#filters#matcher_head#define	neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^function! neocomplete#filters#matcher_head#define() abort "{{{$/;"	f
neocomplete#filters#matcher_length#define	neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^function! neocomplete#filters#matcher_length#define() abort "{{{$/;"	f
neocomplete#filters#matcher_nothing#define	neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^function! neocomplete#filters#matcher_nothing#define() abort "{{{$/;"	f
neocomplete#filters#sorter_filename#define	neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^function! neocomplete#filters#sorter_filename#define() abort "{{{$/;"	f
neocomplete#filters#sorter_length#define	neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! neocomplete#filters#sorter_length#define() abort "{{{$/;"	f
neocomplete#filters#sorter_rank#define	neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^function! neocomplete#filters#sorter_rank#define() abort "{{{$/;"	f
neocomplete#filters#sorter_word#define	neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! neocomplete#filters#sorter_word#define() abort "{{{$/;"	f
neocomplete#get_context	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_context() abort "{{{$/;"	f
neocomplete#get_context_filetype	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_context_filetype(...) abort "{{{$/;"	f
neocomplete#get_cur_text	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_cur_text(...) abort "{{{$/;"	f
neocomplete#get_current_neocomplete	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_current_neocomplete() abort "{{{$/;"	f
neocomplete#get_data_directory	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_data_directory() abort "{{{$/;"	f
neocomplete#get_default_matchers	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_default_matchers() abort "{{{$/;"	f
neocomplete#get_keyword_pattern	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern(...) abort "{{{$/;"	f
neocomplete#get_keyword_pattern_end	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern_end(...) abort "{{{$/;"	f
neocomplete#get_source_filetypes	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#handler#_do_auto_complete	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_do_auto_complete(event) abort "{{{$/;"	f
neocomplete#handler#_on_complete_done	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_complete_done() abort "{{{$/;"	f
neocomplete#handler#_on_insert_char_pre	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_char_pre() abort "{{{$/;"	f
neocomplete#handler#_on_insert_enter	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_enter() abort "{{{$/;"	f
neocomplete#handler#_on_insert_leave	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_leave() abort "{{{$/;"	f
neocomplete#handler#_on_moved_i	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_moved_i() abort "{{{$/;"	f
neocomplete#handler#_on_text_changed	neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_text_changed() abort "{{{$/;"	f
neocomplete#has_vimproc	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#has_vimproc() abort "{{{$/;"	f
neocomplete#head_match	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#head_match(checkstr, headstr) abort "{{{$/;"	f
neocomplete#helper#call_filters	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_filters(filters, source, context) abort "{{{$/;"	f
neocomplete#helper#call_hook	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_hook(sources, hook_name, context) abort "{{{$/;"	f
neocomplete#helper#check_filetype	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_filetype(dictionary) abort "{{{$/;"	f
neocomplete#helper#check_invalid_omnifunc	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_invalid_omnifunc(omnifunc) abort "{{{$/;"	f
neocomplete#helper#clean	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clean(directory) abort "{{{$/;"	f
neocomplete#helper#clear_result	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clear_result() abort "{{{$/;"	f
neocomplete#helper#complete_check	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_check() abort "{{{$/;"	f
neocomplete#helper#complete_configure	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_configure() abort "{{{$/;"	f
neocomplete#helper#filetype_complete	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#helper#get_cur_text	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_cur_text(...) abort "{{{$/;"	f
neocomplete#helper#get_force_omni_complete_pos	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_force_omni_complete_pos(cur_text) abort "{{{$/;"	f
neocomplete#helper#get_source_filetypes	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#helper#get_sources_list	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_sources_list(...) abort "{{{$/;"	f
neocomplete#helper#get_syn_name	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_syn_name(is_trans) abort "{{{$/;"	f
neocomplete#helper#indent_current_line	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#indent_current_line() abort "{{{$/;"	f
neocomplete#helper#is_enabled_source	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#is_enabled_source(source, filetype) abort "{{{$/;"	f
neocomplete#helper#match_word	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#match_word(cur_text, ...) abort "{{{$/;"	f
neocomplete#helper#sort_human	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#sort_human(candidates) abort "{{{$/;"	f
neocomplete#helper#unite_patterns	neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#unite_patterns(pattern_var, filetype) abort "{{{$/;"	f
neocomplete#init#_autocmds	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_autocmds() abort "{{{$/;"	f
neocomplete#init#_context	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_context(context) abort "{{{$/;"	f
neocomplete#init#_current_neocomplete	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_current_neocomplete() abort "{{{$/;"	f
neocomplete#init#_filter	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filter(filter) abort "{{{$/;"	f
neocomplete#init#_filters	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filters(names) abort "{{{$/;"	f
neocomplete#init#_others	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_others() abort "{{{$/;"	f
neocomplete#init#_source	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_source(source) abort "{{{$/;"	f
neocomplete#init#_sources	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_sources(names) abort "{{{$/;"	f
neocomplete#init#_variables	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_variables() abort "{{{$/;"	f
neocomplete#init#disable	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#disable() abort "{{{$/;"	f
neocomplete#init#enable	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#enable() abort "{{{$/;"	f
neocomplete#init#is_enabled	neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#is_enabled() abort "{{{$/;"	f
neocomplete#initialize	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#initialize() abort "{{{$/;"	f
neocomplete#is_auto_complete	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_auto_complete() abort "{{{$/;"	f
neocomplete#is_auto_select	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_auto_select() abort "{{{$/;"	f
neocomplete#is_cache_disabled	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_cache_disabled() abort "{{{$/;"	f
neocomplete#is_enabled	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_enabled() abort "{{{$/;"	f
neocomplete#is_eskk_enabled	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_eskk_enabled() abort "{{{$/;"	f
neocomplete#is_locked	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_locked(...) abort "{{{$/;"	f
neocomplete#is_multibyte_input	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_multibyte_input(cur_text) abort "{{{$/;"	f
neocomplete#is_prefetch	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_prefetch() abort "{{{$/;"	f
neocomplete#is_text_mode	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_text_mode() abort "{{{$/;"	f
neocomplete#is_windows	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_windows() abort "{{{$/;"	f
neocomplete#mappings#auto_complete	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#auto_complete() abort "{{{$/;"	f
neocomplete#mappings#cancel_popup	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#cancel_popup() abort "{{{$/;"	f
neocomplete#mappings#close_popup	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#close_popup() abort "{{{$/;"	f
neocomplete#mappings#complete_common_string	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#complete_common_string() abort "{{{$/;"	f
neocomplete#mappings#define_default_mappings	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#define_default_mappings() abort "{{{$/;"	f
neocomplete#mappings#fallback	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#fallback(i) abort "{{{$/;"	f
neocomplete#mappings#manual_complete	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#manual_complete() abort "{{{$/;"	f
neocomplete#mappings#popup_post	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#popup_post() abort "{{{$/;"	f
neocomplete#mappings#refresh	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#refresh() abort "{{{$/;"	f
neocomplete#mappings#smart_close_popup	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#smart_close_popup() abort "{{{$/;"	f
neocomplete#mappings#start_manual_complete	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#start_manual_complete(...) abort "{{{$/;"	f
neocomplete#mappings#undo_completion	neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#undo_completion() abort "{{{$/;"	f
neocomplete#match_word	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#match_word(...) abort "{{{$/;"	f
neocomplete#print_debug	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_debug(expr) abort "{{{$/;"	f
neocomplete#print_error	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_error(string) abort "{{{$/;"	f
neocomplete#print_warning	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_warning(string) abort "{{{$/;"	f
neocomplete#set_default_matchers	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#set_default_matchers(matchers) abort "{{{$/;"	f
neocomplete#set_dictionary_helper	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#set_dictionary_helper(variable, keys, value) abort "{{{$/;"	f
neocomplete#skip_next_complete	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#skip_next_complete() abort "{{{$/;"	f
neocomplete#smart_close_popup	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#smart_close_popup() abort$/;"	f
neocomplete#sources#buffer#define	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#define() abort "{{{$/;"	f
neocomplete#sources#buffer#get_frequencies	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#get_frequencies() abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache(name) abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache_current_line	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache_current_line() abort "{{{$/;"	f
neocomplete#sources#dictionary#define	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#define() abort "{{{$/;"	f
neocomplete#sources#dictionary#get_dictionaries	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#get_dictionaries(filetype) abort "{{{$/;"	f
neocomplete#sources#dictionary#remake_cache	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#remake_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#file#define	neocomplete/autoload/neocomplete/sources/file.vim	/^function! neocomplete#sources#file#define() abort "{{{$/;"	f
neocomplete#sources#member#define	neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#define() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_buffer	neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_buffer() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_line	neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_line() abort "{{{$/;"	f
neocomplete#sources#member#remake_cache	neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#remake_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#omni#define	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! neocomplete#sources#omni#define() abort "{{{$/;"	f
neocomplete#sources#tag#define	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#define() abort "{{{$/;"	f
neocomplete#sources#tag#make_cache	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#make_cache(force) abort "{{{$/;"	f
neocomplete#start_manual_complete	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#start_manual_complete(...) abort$/;"	f
neocomplete#system	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#system(...) abort "{{{$/;"	f
neocomplete#undo_completion	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#undo_completion() abort$/;"	f
neocomplete#util#convert2list	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#convert2list(expr) abort "{{{$/;"	f
neocomplete#util#disable_default_dictionary	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#util#dup_filter	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#dup_filter(list) abort "{{{$/;"	f
neocomplete#util#escape_pattern	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#escape_pattern(...) abort "{{{$/;"	f
neocomplete#util#expand	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#expand(path) abort "{{{$/;"	f
neocomplete#util#get_last_status	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_last_status(...) abort "{{{$/;"	f
neocomplete#util#get_vital	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_vital() abort "{{{$/;"	f
neocomplete#util#glob	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#glob(pattern, ...) abort "{{{$/;"	f
neocomplete#util#has_vimproc	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#has_vimproc() abort "{{{$/;"	f
neocomplete#util#iconv	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#iconv(...) abort "{{{$/;"	f
neocomplete#util#is_complete_select	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_complete_select() abort "{{{$/;"	f
neocomplete#util#is_mac	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_mac(...) abort "{{{$/;"	f
neocomplete#util#is_sudo	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_sudo() abort "{{{$/;"	f
neocomplete#util#is_text_changed	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_text_changed() abort "{{{$/;"	f
neocomplete#util#is_windows	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_windows(...) abort "{{{$/;"	f
neocomplete#util#join_rtp	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#join_rtp(list) abort "{{{$/;"	f
neocomplete#util#mb_strlen	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#mb_strlen(...) abort "{{{$/;"	f
neocomplete#util#set_default	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default(var, val, ...) abort  "{{{$/;"	f
neocomplete#util#set_default_dictionary	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default_dictionary(variable, keys, value) abort "{{{$/;"	f
neocomplete#util#set_dictionary_helper	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_dictionary_helper(variable, keys, pattern) abort "{{{$/;"	f
neocomplete#util#sort_by	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#sort_by(...) abort "{{{$/;"	f
neocomplete#util#split_rtp	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#split_rtp(...) abort "{{{$/;"	f
neocomplete#util#strchars	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strchars(...) abort "{{{$/;"	f
neocomplete#util#strwidthpart	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart(...) abort "{{{$/;"	f
neocomplete#util#strwidthpart_reverse	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart_reverse(...) abort "{{{$/;"	f
neocomplete#util#substitute_path_separator	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#substitute_path_separator(...) abort "{{{$/;"	f
neocomplete#util#system	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#system(...) abort "{{{$/;"	f
neocomplete#util#truncate	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate(...) abort "{{{$/;"	f
neocomplete#util#truncate_smart	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate_smart(...) abort "{{{$/;"	f
neocomplete#util#uniq	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(...) abort "{{{$/;"	f
neocomplete#util#uniq	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(list) abort "{{{$/;"	f
neocomplete#util#wcswidth	neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#wcswidth(string) abort "{{{$/;"	f
neocomplete#variables#get_filters	neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_filters() abort "{{{$/;"	f
neocomplete#variables#get_frequencies	neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_frequencies() abort "{{{$/;"	f
neocomplete#variables#get_source	neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_source(name) abort "{{{$/;"	f
neocomplete#variables#get_sources	neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_sources() abort "{{{$/;"	f
neocomplete#within_comment	neocomplete/autoload/neocomplete.vim	/^function! neocomplete#within_comment() abort "{{{$/;"	f
neocomplete_source.gather_candidates	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.gather_candidates(args, context) abort "{{{$/;"	f
neocomplete_source.hooks.on_init	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.hooks.on_init(args, context) abort "{{{$/;"	f
new	neocomplete/autoload/vital/neocomplete.vim	/^function! s:new(plugin_name) abort$/;"	f
nr2byte	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
nsplit	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
num_chunks	clang_complete/plugin/clang/cindex.py	/^    def num_chunks(self):$/;"	m	class:CompletionString
num_chunks	clang_complete_old/plugin/clang/cindex.py	/^    def num_chunks(self):$/;"	m	class:CompletionString
objc_type_encoding	clang_complete/plugin/clang/cindex.py	/^    def objc_type_encoding(self):$/;"	m	class:Cursor
objc_type_encoding	clang_complete_old/plugin/clang/cindex.py	/^    def objc_type_encoding(self):$/;"	m	class:Cursor
offset	clang_complete/plugin/clang/cindex.py	/^    def offset(self):$/;"	m	class:SourceLocation
offset	clang_complete_old/plugin/clang/cindex.py	/^    def offset(self):$/;"	m	class:SourceLocation
on_command_prefix	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:on_command_prefix() abort "{{{$/;"	f
on_filetype	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:on_filetype() abort "{{{$/;"	f
on_function	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:on_function() abort "{{{$/;"	f
on_insert	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:on_insert() abort "{{{$/;"	f
on_path	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:on_path(path, event) abort "{{{$/;"	f
on_source	neobundle.vim/autoload/neobundle/config.vim	/^function! s:on_source(bundle) abort "{{{$/;"	f
on_vim_enter	neobundle.vim/autoload/neobundle/config.vim	/^function! s:on_vim_enter() abort "{{{$/;"	f
option	clang_complete/plugin/clang/cindex.py	/^    def option(self):$/;"	m	class:Diagnostic
option	clang_complete_old/plugin/clang/cindex.py	/^    def option(self):$/;"	m	class:Diagnostic
or	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:or(xs) abort$/;"	f
pad_between_letters	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
pad_both_sides	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_left	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
padding_by_displaywidth	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
parse	clang_complete/plugin/clang/cindex.py	/^    def parse(self, path, args=None, unsaved_files=None, options = 0):$/;"	m	class:Index
parse	clang_complete_old/plugin/clang/cindex.py	/^    def parse(self, path, args=None, unsaved_files=None, options = 0):$/;"	m	class:Index
parseArguments	clang_complete/bin/cc_args.py	/^def parseArguments(arguments):$/;"	f
parseArguments	clang_complete_old/bin/cc_args.py	/^def parseArguments(arguments):$/;"	f
parseConfig	clang_complete/plugin/clang_complete.vim	/^function! s:parseConfig()$/;"	f
parseConfig	clang_complete_old/plugin/clang_complete.vim	/^function! s:parseConfig()$/;"	f
parsePathOption	clang_complete/plugin/clang_complete.vim	/^function! s:parsePathOption()$/;"	f
parsePathOption	clang_complete_old/plugin/clang_complete.vim	/^function! s:parsePathOption()$/;"	f
parse_arg	neobundle.vim/autoload/neobundle/parser.vim	/^function! s:parse_arg(arg) abort "{{{$/;"	f
parse_options	neobundle.vim/autoload/neobundle/parser.vim	/^function! s:parse_options(opts) abort "{{{$/;"	f
parse_other_pattern	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:parse_other_pattern(protocol, path, opts) abort "{{{$/;"	f
partition	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
path	neobundle.vim/test/commands.vim	/^let path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
path	neobundle.vim/test/lock.vim	/^let path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
path	neobundle.vim/test/sample.vim	/^let path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
path	neobundle.vim/test/source.vim	/^let path = expand('~\/test-bundle\/'.fnamemodify(expand('<sfile>'), ':t:r'))$/;"	v
path2directory	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
path2project_directory	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
permutations	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
pop	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:pop(list) abort$/;"	f
print_message	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:print_message(msg) abort "{{{$/;"	f
priority	clang_complete/plugin/clang/cindex.py	/^    def priority(self):$/;"	m	class:CompletionString
priority	clang_complete_old/plugin/clang/cindex.py	/^    def priority(self):$/;"	m	class:CompletionString
proc	clang_complete/bin/cc_args.py	/^proc = subprocess.Popen(sys.argv[1:])$/;"	v
proc	clang_complete_old/bin/cc_args.py	/^proc = subprocess.Popen(sys.argv[1:])$/;"	v
processFilename	clang_complete/plugin/clang_complete.vim	/^function! s:processFilename(filename, root)$/;"	f
processFilename	clang_complete_old/plugin/clang_complete.vim	/^function! s:processFilename(filename, root)$/;"	f
process_delimiter	neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:process_delimiter(context, candidate, delimiter, delim_cnt) abort$/;"	f
product	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:product(lists) abort$/;"	f
push	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
r	clang_complete/plugin/snippets/clang_complete.py	/^r = re.compile('\\$`[^`]*`')$/;"	v
r	clang_complete_old/plugin/snippets/clang_complete.py	/^r = re.compile('\\$`[^`]*`')$/;"	v
rand	neocomplete/autoload/neocomplete/commands.vim	/^function! s:rand(max) abort "{{{$/;"	f
ranges	clang_complete/plugin/clang/cindex.py	/^    def ranges(self):$/;"	m	class:Diagnostic
ranges	clang_complete_old/plugin/clang/cindex.py	/^    def ranges(self):$/;"	m	class:Diagnostic
read	clang_complete/plugin/clang/cindex.py	/^    def read(self, path):$/;"	m	class:Index
read	clang_complete_old/plugin/clang/cindex.py	/^    def read(self, path):$/;"	m	class:Index
readConfiguration	clang_complete/bin/cc_args.py	/^def readConfiguration():$/;"	f
readConfiguration	clang_complete_old/bin/cc_args.py	/^def readConfiguration():$/;"	f
readfile	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
referenced	clang_complete/plugin/clang/cindex.py	/^    def referenced(self):$/;"	m	class:Cursor
referenced	clang_complete_old/plugin/clang/cindex.py	/^    def referenced(self):$/;"	m	class:Cursor
register	clang_complete/plugin/clang/cindex.py	/^    def register(item):$/;"	f	function:register_functions
register	clang_complete/plugin/clang/cindex.py	/^    def register(value, name):$/;"	m	class:TokenKind
register	clang_complete_old/plugin/clang/cindex.py	/^    def register(item):$/;"	f	function:register_functions
register	clang_complete_old/plugin/clang/cindex.py	/^    def register(value, name):$/;"	m	class:TokenKind
registerEvent	clang_complete/plugin/libclang.py	/^  def registerEvent(self, event):$/;"	m	class:CodeCompleteTimer
registerEvent	clang_complete_old/plugin/libclang.py	/^  def registerEvent(self, event):$/;"	m	class:CodeCompleteTimer
register_enumerations	clang_complete/plugin/clang/cindex.py	/^def register_enumerations():$/;"	f
register_enumerations	clang_complete_old/plugin/clang/cindex.py	/^def register_enumerations():$/;"	f
register_function	clang_complete/plugin/clang/cindex.py	/^def register_function(lib, item, ignore_errors):$/;"	f
register_function	clang_complete_old/plugin/clang/cindex.py	/^def register_function(lib, item, ignore_errors):$/;"	f
register_functions	clang_complete/plugin/clang/cindex.py	/^def register_functions(lib, ignore_errors):$/;"	f
register_functions	clang_complete_old/plugin/clang/cindex.py	/^def register_functions(lib, ignore_errors):$/;"	f
reload	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:reload(bundles) abort "{{{$/;"	f
remove_ansi_sequences	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
repair_posix_text	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
reparse	clang_complete/plugin/clang/cindex.py	/^    def reparse(self, unsaved_files=None, options=0):$/;"	m	class:TranslationUnit
reparse	clang_complete_old/plugin/clang/cindex.py	/^    def reparse(self, unsaved_files=None, options=0):$/;"	m	class:TranslationUnit
replace	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace_first	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
reset_ftplugin	neobundle.vim/autoload/neobundle/config.vim	/^function! s:reset_ftplugin() abort "{{{$/;"	f
result	clang_complete/bin/cc_args.py	/^result = mergeLists(configuration, args)$/;"	v
result	clang_complete_old/bin/cc_args.py	/^result = mergeLists(configuration, args)$/;"	v
result_type	clang_complete/plugin/clang/cindex.py	/^    def result_type(self):$/;"	m	class:Cursor
result_type	clang_complete_old/plugin/clang/cindex.py	/^    def result_type(self):$/;"	m	class:Cursor
results	clang_complete/plugin/clang/cindex.py	/^    def results(self):$/;"	m	class:CodeCompletionResults
results	clang_complete_old/plugin/clang/cindex.py	/^    def results(self):$/;"	m	class:CodeCompletionResults
ret	clang_complete/bin/cc_args.py	/^ret = proc.wait()$/;"	v
ret	clang_complete_old/bin/cc_args.py	/^ret = proc.wait()$/;"	v
reverse	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
rm_command	neobundle.vim/test/commands.vim	/^  let rm_command = neobundle#util#is_windows() ? 'rmdir \/S \/Q' : 'rm -rf'$/;"	v
rm_command	neobundle.vim/test/lock.vim	/^  let rm_command = neobundle#util#is_windows() ? 'rmdir \/S \/Q' : 'rm -rf'$/;"	v
rm_command	neobundle.vim/test/sample.vim	/^  let rm_command = neobundle#util#is_windows() ? 'rmdir \/S \/Q' : 'rm -rf'$/;"	v
rm_command	neobundle.vim/test/source.vim	/^  let rm_command = neobundle#util#is_windows() ? 'rmdir \/S \/Q' : 'rm -rf'$/;"	v
roll_out_optional	clang_complete_old/plugin/libclang.py	/^  def roll_out_optional(chunks):$/;"	f	function:formatResult
rotate_bundle	neobundle.vim/test/tsort.vim	/^function! s:rotate_bundle(bundles) abort$/;"	f
run	clang_complete/plugin/libclang.py	/^  def run(self):$/;"	m	class:CompleteThread
run	clang_complete_old/plugin/libclang.py	/^  def run(self):$/;"	m	class:CompleteThread
s:Cache	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^let s:Cache = unite#util#get_vital_cache()$/;"	v
s:Cache	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:Cache = unite#util#get_vital_cache()$/;"	v
s:Cache	neocomplete/autoload/neocomplete/cache.vim	/^let s:Cache = neocomplete#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:List	neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:List = neocomplete#util#get_vital().import('Data.List')$/;"	v
s:SNR	neocomplete/autoload/vital/neocomplete.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
s:TYPE_DICT	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital = {}$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:_plugin_name	neocomplete/autoload/vital/_neocomplete.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_s	neocomplete/autoload/vital/neocomplete.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_unify_path_cache	neocomplete/autoload/vital/neocomplete.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:assert	neobundle.vim/test/lock.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	neobundle.vim/test/parse.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	neobundle.vim/test/source.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	neobundle.vim/test/toml.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	neobundle.vim/test/tsort.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	neocomplete/test/neocomplete.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:async_dictionary_list	neocomplete/autoload/neocomplete/sources/buffer.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_dictionary_list	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_tags_list	neocomplete/autoload/neocomplete/sources/tag.vim	/^  let s:async_tags_list = {}$/;"	v
s:buffer_sources	neocomplete/autoload/neocomplete/sources/buffer.vim	/^  let s:buffer_sources = {}$/;"	v
s:cache_sid	neocomplete/autoload/vital/neocomplete.vim	/^let s:cache_sid = {}$/;"	v
s:cached_files	neocomplete/autoload/neocomplete/sources/file.vim	/^let s:cached_files = {}$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_case.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:converter = {$/;"	v
s:converter	neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:converter = {$/;"	v
s:dictionary_cache	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^  let s:dictionary_cache = {}$/;"	v
s:exists_context_filetype	neocomplete/autoload/neocomplete/context_filetype.vim	/^  let s:exists_context_filetype = exists('*context_filetype#version')$/;"	v
s:filter	neobundle.vim/autoload/neobundle/sources/github.vim	/^let s:filter = {$/;"	v
s:flagInfo	clang_complete/plugin/clang_complete.vim	/^let s:flagInfo = {$/;"	v
s:flagInfo	clang_complete_old/plugin/clang_complete.vim	/^let s:flagInfo = {$/;"	v
s:flagPattern	clang_complete/plugin/clang_complete.vim	/^let s:flagPattern = '\\%(' . join(s:flagPatterns, '\\|') . '\\)'$/;"	v
s:flagPattern	clang_complete_old/plugin/clang_complete.vim	/^let s:flagPattern = '\\%(' . join(s:flagPatterns, '\\|') . '\\)'$/;"	v
s:flagPatterns	clang_complete/plugin/clang_complete.vim	/^  let s:flagPatterns = add(s:flagPatterns, s:flag.pattern)$/;"	v
s:flagPatterns	clang_complete/plugin/clang_complete.vim	/^let s:flagPatterns = []$/;"	v
s:flagPatterns	clang_complete_old/plugin/clang_complete.vim	/^  let s:flagPatterns = add(s:flagPatterns, s:flag.pattern)$/;"	v
s:flagPatterns	clang_complete_old/plugin/clang_complete.vim	/^let s:flagPatterns = []$/;"	v
s:has_latest_module	neocomplete/autoload/vital/neocomplete.vim	/^let s:has_latest_module = isdirectory(expand('<sfile>:h') . '\/__latest__')$/;"	v
s:init_vim_path	neobundle.vim/autoload/neobundle.vim	/^let s:init_vim_path = fnamemodify(expand('<sfile>'), ':h')$/;"	v
s:install_info_version	neobundle.vim/autoload/neobundle/installer.vim	/^let s:install_info_version = '3.0'$/;"	v
s:is_cygwin	neobundle.vim/autoload/neobundle/util.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_enabled	neocomplete/autoload/neocomplete/init.vim	/^  let s:is_enabled = 0$/;"	v
s:is_mac	neobundle.vim/autoload/neobundle/util.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_unix	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_vital_vim	neocomplete/autoload/vital/neocomplete.vim	/^let s:is_vital_vim = s:plugin_name is# '_latest__'$/;"	v
s:is_windows	neobundle.vim/autoload/neobundle/util.vim	/^let s:is_windows = has('win32')$/;"	v
s:is_windows	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:job_info	neobundle.vim/autoload/neobundle/installer.vim	/^let s:job_info = {}$/;"	v
s:kind	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:kind = {$/;"	v
s:kind	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:kind.action_table.delete = {$/;"	v
s:kind	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:kind.action_table.reinstall = {$/;"	v
s:kind	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:kind.action_table.update = {$/;"	v
s:lazy_rtp_bundles	neobundle.vim/autoload/neobundle/config.vim	/^  let s:lazy_rtp_bundles = []$/;"	v
s:loaded	neocomplete/autoload/vital/neocomplete.vim	/^let s:loaded = {}$/;"	v
s:log	neobundle.vim/autoload/neobundle/installer.vim	/^let s:log = []$/;"	v
s:matcher	neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:matcher = {$/;"	v
s:matcher	neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^let s:matcher = {$/;"	v
s:matcher	neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^let s:matcher = {$/;"	v
s:matcher	neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:matcher = {$/;"	v
s:member_sources	neocomplete/autoload/neocomplete/sources/member.vim	/^  let s:member_sources = {}$/;"	v
s:metadata	neobundle.vim/autoload/neobundle/metadata.vim	/^let s:metadata = {}$/;"	v
s:need_trans	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:neobundle_dir	neobundle.vim/autoload/neobundle.vim	/^let s:neobundle_dir = ''$/;"	v
s:neobundle_runtime_dir	neobundle.vim/autoload/neobundle.vim	/^let s:neobundle_runtime_dir = neobundle#util#substitute_path_separator($/;"	v
s:neobundles	neobundle.vim/autoload/neobundle/config.vim	/^  let s:neobundles = {}$/;"	v
s:neocomplete_source	neocomplete/autoload/unite/sources/neocomplete.vim	/^let s:neocomplete_source = {$/;"	v
s:plugin_name	neocomplete/autoload/vital/neocomplete.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_names	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:plugin_names = []$/;"	v
s:plugin_path	clang_complete/plugin/clang_complete.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:plugin_path	clang_complete_old/plugin/clang_complete.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:project_root	neocomplete/autoload/vital/neocomplete.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:repository	neobundle.vim/autoload/neobundle/metadata.vim	/^let s:repository =$/;"	v
s:repository_cache	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^let s:repository_cache = []$/;"	v
s:repository_cache	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^let s:repository_cache = []$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/TOML.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/autoload.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/installer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/metadata.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/parser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/sources/github.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/git.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/hg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/none.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/raw.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/svn.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/types/vba.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/neobundle/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/sources/neobundle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/sources/neobundle_log.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neobundle.vim/plugin/neobundle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/async_cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/context_filetype.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/custom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_case.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/handler.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/member.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/sources/tag.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/neocomplete/variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/unite/sources/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/plugin/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/plugin/neocomplete/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/plugin/neocomplete/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/plugin/neocomplete/member.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	neocomplete/plugin/neocomplete/tag.vim	/^let s:save_cpo = &cpo$/;"	v
s:sdir	neocomplete/autoload/neocomplete/cache.vim	/^let s:sdir = neocomplete#util#substitute_path_separator($/;"	v
s:skip_pattern	neobundle.vim/autoload/neobundle/TOML.vim	/^let s:skip_pattern = '\\C^\\%(\\_s\\+\\|' . "#[^\\r\\n]*" . '\\)'$/;"	v
s:sorter	neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^let s:sorter = {$/;"	v
s:sorter	neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^let s:sorter = {$/;"	v
s:sorter	neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^let s:sorter = {$/;"	v
s:sorter	neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^let s:sorter = {$/;"	v
s:source	neobundle.vim/autoload/neobundle/sources/github.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle.vim	/^let s:source.converters = s:source.source__converter$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^let s:source.action_table.source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_log.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:source = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:source.action_table.install = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:source.action_table.yank = {$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:source.converters = s:source.source__converter$/;"	v
s:source	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^let s:source.sorters = s:source.source__sorter$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/buffer.vim	/^let s:source = {$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let s:source = {$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/file.vim	/^let s:source = {$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/member.vim	/^let s:source = {$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:source = {$/;"	v
s:source	neocomplete/autoload/neocomplete/sources/tag.vim	/^let s:source = {$/;"	v
s:source_install	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^let s:source_install = {$/;"	v
s:source_update	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^let s:source_update = deepcopy(s:source_install)$/;"	v
s:source_update	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^let s:source_update.description = 'update bundles'$/;"	v
s:source_update	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^let s:source_update.name = 'neobundle\/update'$/;"	v
s:suite	neobundle.vim/test/lock.vim	/^let s:suite = themis#suite('lock')$/;"	v
s:suite	neobundle.vim/test/parse.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	neobundle.vim/test/source.vim	/^let s:suite = themis#suite('source')$/;"	v
s:suite	neobundle.vim/test/toml.vim	/^let s:suite = themis#suite('toml')$/;"	v
s:suite	neobundle.vim/test/tsort.vim	/^let s:suite = themis#suite('tsort')$/;"	v
s:suite	neocomplete/test/neocomplete.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:table_key_pattern	neobundle.vim/autoload/neobundle/TOML.vim	/^let s:table_key_pattern = s:table_name_pattern$/;"	v
s:table_name_pattern	neobundle.vim/autoload/neobundle/TOML.vim	/^let s:table_name_pattern = '\\%([^ [:tab:]#.[\\]=]\\+\\)'$/;"	v
s:tags_list	neocomplete/autoload/neocomplete/sources/tag.vim	/^  let s:tags_list = {}$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/git.vim	/^let s:type = {$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/hg.vim	/^let s:type = {$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/none.vim	/^let s:type = {$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/raw.vim	/^let s:type = {$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/svn.vim	/^let s:type = {$/;"	v
s:type	neobundle.vim/autoload/neobundle/types/vba.vim	/^let s:type = {$/;"	v
s:updates_log	neobundle.vim/autoload/neobundle/installer.vim	/^let s:updates_log = []$/;"	v
s:use_maparg	clang_complete/plugin/clang_complete.vim	/^let s:use_maparg = v:version > 703 || (v:version == 703 && has('patch32'))$/;"	v
s:use_maparg	clang_complete_old/plugin/clang_complete.vim	/^let s:use_maparg = v:version > 703 || (v:version == 703 && has('patch32'))$/;"	v
s:vimrcs	neobundle.vim/autoload/neobundle/commands.vim	/^let s:vimrcs = []$/;"	v
s:vital_base_dir	neocomplete/autoload/vital/neocomplete.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:within_block	neobundle.vim/autoload/neobundle/config.vim	/^  let s:within_block = 0$/;"	v
save	clang_complete/plugin/clang/cindex.py	/^    def save(self, filename):$/;"	m	class:TranslationUnit
save	clang_complete_old/plugin/clang/cindex.py	/^    def save(self, filename):$/;"	m	class:TranslationUnit
save_install_info	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:save_install_info(bundles) abort "{{{$/;"	f
save_lockfile	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:save_lockfile(bundles) abort "{{{$/;"	f
scan	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
search	neocomplete/autoload/vital/neocomplete.vim	/^function! s:search(pattern) abort dict$/;"	f
search_vim_path	neocomplete/autoload/neocomplete/cache.vim	/^function! s:search_vim_path() abort "{{{$/;"	f
semantic_parent	clang_complete/plugin/clang/cindex.py	/^    def semantic_parent(self):$/;"	m	class:Cursor
semantic_parent	clang_complete_old/plugin/clang/cindex.py	/^    def semantic_parent(self):$/;"	m	class:Cursor
set_auto_completion_length	neocomplete/autoload/neocomplete/commands.vim	/^function! s:set_auto_completion_length(len) abort "{{{$/;"	f
set_compatibility_check	clang_complete/plugin/clang/cindex.py	/^    def set_compatibility_check(check_status):$/;"	m	class:Config
set_compatibility_check	clang_complete_old/plugin/clang/cindex.py	/^    def set_compatibility_check(check_status):$/;"	m	class:Config
set_complete_results_pos	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_pos(funcs, cur_text) abort "{{{$/;"	f
set_complete_results_words	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_words(complete_results) abort "{{{$/;"	f
set_default	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
set_default_menu	neocomplete/autoload/neocomplete/complete.vim	/^function! s:set_default_menu(words, source) abort "{{{$/;"	f
set_library_file	clang_complete/plugin/clang/cindex.py	/^    def set_library_file(filename):$/;"	m	class:Config
set_library_file	clang_complete_old/plugin/clang/cindex.py	/^    def set_library_file(filename):$/;"	m	class:Config
set_library_path	clang_complete/plugin/clang/cindex.py	/^    def set_library_path(path):$/;"	m	class:Config
set_library_path	clang_complete_old/plugin/clang/cindex.py	/^    def set_library_path(path):$/;"	m	class:Config
severity	clang_complete/plugin/clang/cindex.py	/^    def severity(self):$/;"	m	class:Diagnostic
severity	clang_complete_old/plugin/clang/cindex.py	/^    def severity(self):$/;"	m	class:Diagnostic
shellescape	neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellescape	neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
shift	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:shift(list) abort$/;"	f
should_create_cache	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:should_create_cache(bufnr) " {{{$/;"	f
sid2sfuncs	neocomplete/autoload/vital/neocomplete.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
smart_execute_command	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
snippetsAddSnippet	clang_complete/plugin/libclang.py	/^snippetsAddSnippet = None$/;"	v
snippetsAddSnippet	clang_complete/plugin/snippets/clang_complete.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsAddSnippet	clang_complete/plugin/snippets/dummy.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsAddSnippet	clang_complete/plugin/snippets/ultisnips.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsAddSnippet	clang_complete_old/plugin/snippets/clang_complete.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsAddSnippet	clang_complete_old/plugin/snippets/dummy.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsAddSnippet	clang_complete_old/plugin/snippets/ultisnips.py	/^def snippetsAddSnippet(fullname, word, abbr):$/;"	f
snippetsFormatPlaceHolder	clang_complete/plugin/libclang.py	/^snippetsFormatPlaceHolder = None$/;"	v
snippetsFormatPlaceHolder	clang_complete/plugin/snippets/clang_complete.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsFormatPlaceHolder	clang_complete/plugin/snippets/dummy.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsFormatPlaceHolder	clang_complete/plugin/snippets/ultisnips.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsFormatPlaceHolder	clang_complete_old/plugin/snippets/clang_complete.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsFormatPlaceHolder	clang_complete_old/plugin/snippets/dummy.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsFormatPlaceHolder	clang_complete_old/plugin/snippets/ultisnips.py	/^def snippetsFormatPlaceHolder(word):$/;"	f
snippetsInit	clang_complete/plugin/snippets/clang_complete.py	/^def snippetsInit():$/;"	f
snippetsInit	clang_complete/plugin/snippets/dummy.py	/^def snippetsInit():$/;"	f
snippetsInit	clang_complete/plugin/snippets/ultisnips.py	/^def snippetsInit():$/;"	f
snippetsInit	clang_complete_old/plugin/snippets/clang_complete.py	/^def snippetsInit():$/;"	f
snippetsInit	clang_complete_old/plugin/snippets/dummy.py	/^def snippetsInit():$/;"	f
snippetsInit	clang_complete_old/plugin/snippets/ultisnips.py	/^def snippetsInit():$/;"	f
snippetsReset	clang_complete/plugin/snippets/clang_complete.py	/^def snippetsReset():$/;"	f
snippetsReset	clang_complete/plugin/snippets/dummy.py	/^def snippetsReset():$/;"	f
snippetsReset	clang_complete/plugin/snippets/ultisnips.py	/^def snippetsReset():$/;"	f
snippetsReset	clang_complete_old/plugin/snippets/clang_complete.py	/^def snippetsReset():$/;"	f
snippetsReset	clang_complete_old/plugin/snippets/dummy.py	/^def snippetsReset():$/;"	f
snippetsReset	clang_complete_old/plugin/snippets/ultisnips.py	/^def snippetsReset():$/;"	f
snippetsTrigger	clang_complete/plugin/snippets/clang_complete.py	/^def snippetsTrigger():$/;"	f
snippetsTrigger	clang_complete/plugin/snippets/dummy.py	/^def snippetsTrigger():$/;"	f
snippetsTrigger	clang_complete/plugin/snippets/ultisnips.py	/^def snippetsTrigger():$/;"	f
snippetsTrigger	clang_complete_old/plugin/snippets/clang_complete.py	/^def snippetsTrigger():$/;"	f
snippetsTrigger	clang_complete_old/plugin/snippets/dummy.py	/^def snippetsTrigger():$/;"	f
snippetsTrigger	clang_complete_old/plugin/snippets/ultisnips.py	/^def snippetsTrigger():$/;"	f
sort	neobundle.vim/autoload/neobundle/util.vim	/^function! s:sort(list, expr) abort "{{{$/;"	f
sort	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:sort(list, expr) abort$/;"	f
sort	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
sort_by	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:sort_by(list, expr) abort$/;"	f
sort_by	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
sorter.filter	neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
sorter.filter	neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
sorter.filter	neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
sorter.filter	neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
source.action_table.install.func	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.action_table.install.func(candidates) abort "{{{$/;"	f
source.action_table.source.func	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^function! s:source.action_table.source.func(candidates) abort "{{{$/;"	f
source.action_table.yank.func	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.action_table.yank.func(candidates) abort "{{{$/;"	f
source.complete	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/neobundle/sources/github.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/neobundle/sources/metadata.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/neobundle/sources/vim_scripts_org.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/unite/sources/neobundle.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/unite/sources/neobundle_log.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.gather_candidates	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
source.get_complete_position	neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.get_complete_position	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.get_complete_position	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.hooks.on_final	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
source.hooks.on_final	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
source.hooks.on_final	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
source.hooks.on_init	neobundle.vim/autoload/unite/sources/neobundle.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_init	neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_init	neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_init	neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_init	neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_post_filter	neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_post_filter(context) abort "{{{$/;"	f
source.hooks.on_syntax	neobundle.vim/autoload/unite/sources/neobundle_log.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.source__converter	neobundle.vim/autoload/unite/sources/neobundle.vim	/^function! s:source.source__converter(candidates, context) abort "{{{$/;"	f
source.source__converter	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.source__converter(candidates, context) abort "{{{$/;"	f
source.source__sorter	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! s:source.source__sorter(candidates, context) abort "{{{$/;"	f
source_focus	neobundle.vim/autoload/neobundle/autoload.vim	/^function! s:source_focus() abort "{{{$/;"	f
source_install.async_gather_candidates	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_install.async_gather_candidates(args, context) abort "{{{$/;"	f
source_install.complete	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_install.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_install.hooks.on_close	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_install.hooks.on_close(args, context) abort "{{{$/;"	f
source_install.hooks.on_init	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_install.hooks.on_init(args, context) abort "{{{$/;"	f
source_install.hooks.on_syntax	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_install.hooks.on_syntax(args, context) abort "{{{$/;"	f
source_lockfile	neobundle.vim/autoload/neobundle/installer.vim	/^function! s:source_lockfile() abort "{{{$/;"	f
source_update.hooks.on_init	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! s:source_update.hooks.on_init(args, context) abort "{{{$/;"	f
span	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
spawn	neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:CompletionChunk
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Cursor
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Diagnostic
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Token
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TranslationUnit
spelling	clang_complete/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TypeKind
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:CompletionChunk
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Cursor
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Diagnostic
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:Token
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TranslationUnit
spelling	clang_complete_old/plugin/clang/cindex.py	/^    def spelling(self):$/;"	m	class:TypeKind
split3	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
splitOptions	clang_complete/plugin/libclang.py	/^def splitOptions(options):$/;"	f
splitOptions	clang_complete_old/plugin/libclang.py	/^def splitOptions(options):$/;"	f
split_by_displaywidth	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
split_leftright	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split_posix_text	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
start	clang_complete/plugin/clang/cindex.py	/^    def start(self):$/;"	m	class:SourceRange
start	clang_complete_old/plugin/clang/cindex.py	/^    def start(self):$/;"	m	class:SourceRange
start	neocomplete/test/neocomplete.vim	/^  let start = reltime()$/;"	v
start_complete	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:start_complete(is_quick_match) abort "{{{$/;"	f
starts_with	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
strchars	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
string	clang_complete/plugin/clang/cindex.py	/^    def string(self):$/;"	m	class:CodeCompletionResult
string	clang_complete/plugin/clang/cindex.py	/^    def string(self):$/;"	m	class:CompletionChunk
string	clang_complete_old/plugin/clang/cindex.py	/^    def string(self):$/;"	m	class:CodeCompletionResult
string	clang_complete_old/plugin/clang/cindex.py	/^    def string(self):$/;"	m	class:CompletionChunk
strwidthpart	neobundle.vim/autoload/neobundle/util.vim	/^function! s:strwidthpart(str, width) abort "{{{$/;"	f
strwidthpart	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:strwidthpart(str, width) abort "{{{$/;"	f
strwidthpart	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	neobundle.vim/autoload/neobundle/util.vim	/^function! s:strwidthpart_reverse(str, width) abort "{{{$/;"	f
strwidthpart_reverse	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
strwidthpart_reverse	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
substitute_last	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
substitute_path_separator	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
suite.after_each	neobundle.vim/test/toml.vim	/^function! s:suite.after_each() abort$/;"	f
suite.after_each	neobundle.vim/test/tsort.vim	/^function! s:suite.after_each() abort$/;"	f
suite.autoload	neobundle.vim/test/parse.vim	/^function! s:suite.autoload() abort$/;"	f
suite.before_each	neobundle.vim/test/toml.vim	/^function! s:suite.before_each() abort$/;"	f
suite.before_each	neobundle.vim/test/tsort.vim	/^function! s:suite.before_each() abort$/;"	f
suite.bundled_circular_reference	neobundle.vim/test/tsort.vim	/^function! s:suite.bundled_circular_reference() abort$/;"	f
suite.bundled_no_depends	neobundle.vim/test/tsort.vim	/^function! s:suite.bundled_no_depends() abort$/;"	f
suite.bundled_normal	neobundle.vim/test/tsort.vim	/^function! s:suite.bundled_normal() abort$/;"	f
suite.bundled_normal2	neobundle.vim/test/tsort.vim	/^function! s:suite.bundled_normal2() abort$/;"	f
suite.default_options	neobundle.vim/test/parse.vim	/^function! s:suite.default_options() abort$/;"	f
suite.deprecated	neobundle.vim/test/parse.vim	/^function! s:suite.deprecated() abort$/;"	f
suite.escape	neocomplete/test/neocomplete.vim	/^function! s:suite.escape() abort$/;"	f
suite.fetch_plugins	neobundle.vim/test/parse.vim	/^function! s:suite.fetch_plugins() abort$/;"	f
suite.fuzzy	neocomplete/test/neocomplete.vim	/^function! s:suite.fuzzy() abort$/;"	f
suite.gitbucket_git_repos	neobundle.vim/test/parse.vim	/^function! s:suite.gitbucket_git_repos() abort$/;"	f
suite.github_git_repos	neobundle.vim/test/parse.vim	/^function! s:suite.github_git_repos() abort$/;"	f
suite.hg_repos	neobundle.vim/test/parse.vim	/^function! s:suite.hg_repos() abort$/;"	f
suite.name_conversion	neobundle.vim/test/parse.vim	/^function! s:suite.name_conversion() abort$/;"	f
suite.no_depends	neobundle.vim/test/tsort.vim	/^function! s:suite.no_depends() abort$/;"	f
suite.no_plugins	neobundle.vim/test/toml.vim	/^function! s:suite.no_plugins() abort$/;"	f
suite.no_repository	neobundle.vim/test/toml.vim	/^function! s:suite.no_repository() abort$/;"	f
suite.no_toml	neobundle.vim/test/toml.vim	/^function! s:suite.no_toml() abort$/;"	f
suite.normal	neobundle.vim/test/toml.vim	/^function! s:suite.normal() abort$/;"	f
suite.normal	neobundle.vim/test/tsort.vim	/^function! s:suite.normal() abort$/;"	f
suite.overlap	neocomplete/test/neocomplete.vim	/^function! s:suite.overlap() abort$/;"	f
suite.parse_directory	neobundle.vim/test/parse.vim	/^function! s:suite.parse_directory() abort$/;"	f
suite.pattern_a	neobundle.vim/test/source.vim	/^function! s:suite.pattern_a() abort$/;"	f
suite.pattern_b	neobundle.vim/test/source.vim	/^function! s:suite.pattern_b() abort$/;"	f
suite.pattern_c	neobundle.vim/test/source.vim	/^function! s:suite.pattern_c() abort$/;"	f
suite.pattern_d	neobundle.vim/test/source.vim	/^function! s:suite.pattern_d() abort$/;"	f
suite.raw_repos	neobundle.vim/test/parse.vim	/^function! s:suite.raw_repos() abort$/;"	f
suite.revision_check	neobundle.vim/test/lock.vim	/^function! s:suite.revision_check() abort$/;"	f
suite.sort	neocomplete/test/neocomplete.vim	/^function! s:suite.sort() abort$/;"	f
suite.ssh_protocol	neobundle.vim/test/parse.vim	/^function! s:suite.ssh_protocol() abort$/;"	f
suite.svn_repos	neobundle.vim/test/parse.vim	/^function! s:suite.svn_repos() abort$/;"	f
suite.tsort_circular_reference	neobundle.vim/test/tsort.vim	/^function! s:suite.tsort_circular_reference() abort$/;"	f
suite.vba_repos	neobundle.vim/test/parse.vim	/^function! s:suite.vba_repos() abort$/;"	f
system	neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:system(str, ...) abort$/;"	f
take_while	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
text	clang_complete_old/bin/generate_kinds.py	/^    text = mapping.get(kind.enum_value, kind.enum_value)$/;"	v
time	clang_complete/plugin/clang/cindex.py	/^    def time(self):$/;"	m	class:File
time	clang_complete_old/plugin/clang/cindex.py	/^    def time(self):$/;"	m	class:File
translationUnits	clang_complete/plugin/libclang.py	/^translationUnits = None$/;"	v
translation_unit	clang_complete/plugin/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Cursor
translation_unit	clang_complete/plugin/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Type
translation_unit	clang_complete_old/plugin/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Cursor
translation_unit	clang_complete_old/plugin/clang/cindex.py	/^    def translation_unit(self):$/;"	m	class:Type
trim	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim_end	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
trim_start	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
truncate	neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:truncate(str, width) abort "{{{$/;"	f
truncate	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate_skipping	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
truncate_skipping	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
tsort_impl	neobundle.vim/autoload/neobundle/config.vim	/^function! s:tsort_impl(target, bundles, mark, sorted) abort "{{{$/;"	f
tu	clang_complete_old/bin/generate_kinds.py	/^tu = index.parse(sys.argv[1])$/;"	v
type	clang_complete/plugin/clang/cindex.py	/^    def type(self):$/;"	m	class:Cursor
type	clang_complete_old/plugin/clang/cindex.py	/^    def type(self):$/;"	m	class:Cursor
type.detect	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.detect	neobundle.vim/autoload/neobundle/types/hg.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.detect	neobundle.vim/autoload/neobundle/types/none.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.detect	neobundle.vim/autoload/neobundle/types/raw.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.detect	neobundle.vim/autoload/neobundle/types/svn.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.detect	neobundle.vim/autoload/neobundle/types/vba.vim	/^function! s:type.detect(path, opts) abort "{{{$/;"	f
type.get_commit_date_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_commit_date_command(bundle) abort "{{{$/;"	f
type.get_fetch_remote_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_fetch_remote_command(bundle) abort "{{{$/;"	f
type.get_gc_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_gc_command(bundle) abort "{{{$/;"	f
type.get_log_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_log_command(bundle, new_rev, old_rev) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/hg.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/none.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/raw.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/svn.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_lock_command	neobundle.vim/autoload/neobundle/types/vba.vim	/^function! s:type.get_revision_lock_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/hg.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/none.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/raw.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/svn.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_number_command	neobundle.vim/autoload/neobundle/types/vba.vim	/^function! s:type.get_revision_number_command(bundle) abort "{{{$/;"	f
type.get_revision_pretty_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_revision_pretty_command(bundle) abort "{{{$/;"	f
type.get_revision_remote_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_revision_remote_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/git.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/hg.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/none.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/raw.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/svn.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
type.get_sync_command	neobundle.vim/autoload/neobundle/types/vba.vim	/^function! s:type.get_sync_command(bundle) abort "{{{$/;"	f
ultisnips_idx	clang_complete/plugin/snippets/ultisnips.py	/^ultisnips_idx = 0$/;"	v
underlying_typedef_type	clang_complete/plugin/clang/cindex.py	/^    def underlying_typedef_type(self):$/;"	m	class:Cursor
underlying_typedef_type	clang_complete_old/plugin/clang/cindex.py	/^    def underlying_typedef_type(self):$/;"	m	class:Cursor
unescape	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
unescape_pattern	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
uniq	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq_by	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
unite#kinds#neobundle#define	neobundle.vim/autoload/unite/kinds/neobundle.vim	/^function! unite#kinds#neobundle#define() abort "{{{$/;"	f
unite#sources#neobundle#define	neobundle.vim/autoload/unite/sources/neobundle.vim	/^function! unite#sources#neobundle#define() abort "{{{$/;"	f
unite#sources#neobundle_install#define	neobundle.vim/autoload/unite/sources/neobundle_install.vim	/^function! unite#sources#neobundle_install#define() abort "{{{$/;"	f
unite#sources#neobundle_lazy#define	neobundle.vim/autoload/unite/sources/neobundle_lazy.vim	/^function! unite#sources#neobundle_lazy#define() abort "{{{$/;"	f
unite#sources#neobundle_log#define	neobundle.vim/autoload/unite/sources/neobundle_log.vim	/^function! unite#sources#neobundle_log#define() abort "{{{$/;"	f
unite#sources#neobundle_search#complete_plugin_names	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! unite#sources#neobundle_search#complete_plugin_names(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#sources#neobundle_search#define	neobundle.vim/autoload/unite/sources/neobundle_search.vim	/^function! unite#sources#neobundle_search#define() abort "{{{$/;"	f
unite#sources#neocomplete#define	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#define() abort "{{{$/;"	f
unite#sources#neocomplete#start_complete	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_complete() abort "{{{$/;"	f
unite#sources#neocomplete#start_quick_match	neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_quick_match() abort "{{{$/;"	f
unload	neocomplete/autoload/vital/neocomplete.vim	/^function! s:unload() abort dict$/;"	f
unshift	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
updateCurrentDiagnostics	clang_complete/plugin/libclang.py	/^def updateCurrentDiagnostics():$/;"	f
updateCurrentDiagnostics	clang_complete_old/plugin/libclang.py	/^def updateCurrentDiagnostics():$/;"	f
updateSnips	clang_complete/plugin/snippets/clang_complete.py	/^def updateSnips():$/;"	f
updateSnips	clang_complete_old/plugin/snippets/clang_complete.py	/^def updateSnips():$/;"	f
update_tags	neobundle.vim/autoload/neobundle/commands.vim	/^function! s:update_tags() abort "{{{$/;"	f
use_previous_result	neocomplete/autoload/neocomplete/complete.vim	/^function! s:use_previous_result(source, context) abort "{{{$/;"	f
visitor	clang_complete/plugin/clang/cindex.py	/^        def visitor(child, parent, children):$/;"	f	function:Cursor.get_children
visitor	clang_complete/plugin/clang/cindex.py	/^        def visitor(fobj, lptr, depth, includes):$/;"	f	function:TranslationUnit.get_includes
visitor	clang_complete_old/plugin/clang/cindex.py	/^        def visitor(child, parent, children):$/;"	f	function:Cursor.get_children
visitor	clang_complete_old/plugin/clang/cindex.py	/^        def visitor(fobj, lptr, depth, includes):$/;"	f	function:TranslationUnit.get_includes
vital#	neocomplete/autoload/vital/_neocomplete.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	neocomplete/autoload/vital/neocomplete.vim	/^function! vital#{s:plugin_name}#of() abort$/;"	f
vital#_neocomplete#Data#List#import	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^  function! vital#_neocomplete#Data#List#import() abort$/;"	f
vital#_neocomplete#Data#String#import	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! vital#_neocomplete#Data#String#import() abort$/;"	f
vital#_neocomplete#Prelude#import	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! vital#_neocomplete#Prelude#import() abort$/;"	f
vital#_neocomplete#Process#import	neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! vital#_neocomplete#Process#import() abort$/;"	f
vital#_neocomplete#System#Cache#Deprecated#import	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! vital#_neocomplete#System#Cache#Deprecated#import() abort$/;"	f
vital#of	neocomplete/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
vital_files	neocomplete/autoload/vital/neocomplete.vim	/^function! s:vital_files() abort$/;"	f
wcswidth	neobundle.vim/autoload/neobundle/util.vim	/^function! s:wcswidth(str) abort "{{{$/;"	f
wcswidth	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
wcswidth	neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
with_index	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
wrap	neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
writeConfiguration	clang_complete/bin/cc_args.py	/^def writeConfiguration(lines):$/;"	f
writeConfiguration	clang_complete_old/bin/cc_args.py	/^def writeConfiguration(lines):$/;"	f
writefile	neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
zip	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
